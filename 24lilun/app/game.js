var the_string = "[1,1,1,1] [1,1,1,2] [1,1,1,3] [1,1,1,4] [1,1,1,5] [1,1,1,6] [1,1,1,7] [1,1,1,8] (1+1+1)x8 [1,1,1,9] [1,1,1,10] [1,1,1,11] (11+1)x(1+1) [1,1,1,12] (1+1)x12x1 [1,1,1,13] (13-1)x(1+1) [1,1,2,2] [1,1,2,3] [1,1,2,4] [1,1,2,5] [1,1,2,6] (1+1)x6x2 (2+1+1)x6 [1,1,2,7] (7+1)x(2+1) [1,1,2,8] (2+1)x8x1 [1,1,2,9] (9-1)x(2+1) [1,1,2,10] (10+2)x(1+1) (10+1+1)x2 [1,1,2,11] 11x2+1+1 (1+1)x11+2 (11+1)x2x1 [1,1,2,12] 12x2+1-1 12/(1-1/2) [1,1,2,13] 13x2-1-1 (1+1)x13-2 (13-1)x2x1 [1,1,3,3] [1,1,3,4] (1+1)x4x3 [1,1,3,5] (5+1)x(3+1) [1,1,3,6] (6+1+1)x3 (3+1)x6x1 [1,1,3,7] (7-1)x(3+1) (7+1)x3x1 [1,1,3,8] 8x3+1-1 [1,1,3,9] (9+3)x(1+1) (9-1)x3x1 [1,1,3,10] (10-1-1)x3 [1,1,3,11] (11+1)x(3-1) [1,1,3,12] (3-1)x12x1 [1,1,3,13] (13-1)x(3-1) [1,1,4,4] (4+1+1)x4 [1,1,4,5] (4+1)x5-1 (5+1)x4x1 [1,1,4,6] 6x4+1-1 [1,1,4,7] (7-1)x4x1 (7+1)x(4-1) [1,1,4,8] (8+4)x(1+1) (8-1-1)x4 (4-1)x8x1 [1,1,4,9] (9-1)x(4-1) [1,1,4,10] (1+1)x10+4 [1,1,4,11] [1,1,4,12] 12x4/(1+1) (4-1-1)x12 [1,1,4,13] [1,1,5,5] (5+1)x(5-1) (5x5-1)x1 [1,1,5,6] (5-1)x6x1 (6-1)x5-1 [1,1,5,7] (7+5)x(1+1) (7-1)x(5-1) [1,1,5,8] (5-1-1)x8 [1,1,5,9] [1,1,5,10] [1,1,5,11] [1,1,5,12] [1,1,5,13] [1,1,6,6] (6+6)x(1+1) (6-1-1)x6 [1,1,6,7] [1,1,6,8] 8x6/(1+1) [1,1,6,9] (1+1)x9+6 [1,1,6,10] [1,1,6,11] [1,1,6,12] (1+1)x6+12 [1,1,6,13] [1,1,7,7] [1,1,7,8] [1,1,7,9] [1,1,7,10] (1+1)x7+10 [1,1,7,11] [1,1,7,12] [1,1,7,13] [1,1,8,8] (1+1)x8+8 [1,1,8,9] [1,1,8,10] [1,1,8,11] [1,1,8,12] [1,1,8,13] [1,1,9,9] [1,1,9,10] [1,1,9,11] [1,1,9,12] [1,1,9,13] 13+9+1+1 [1,1,10,10] [1,1,10,11] [1,1,10,12] 12+10+1+1 [1,1,10,13] (13+10+1)x1 [1,1,11,11] 11+11+1+1 [1,1,11,12] (12+11+1)x1 [1,1,11,13] 13+11+1-1 [1,1,12,12] 12+12+1-1 [1,1,12,13] (13+12-1)x1 [1,1,13,13] 13+13-1-1 [1,2,2,2] [1,2,2,3] [1,2,2,4] (2+1)x4x2 [1,2,2,5] (5+1)x(2+2) (5+1)x2x2 [1,2,2,6] (6+2)x(2+1) 6x2x2x1 (2+2)x6x1 [1,2,2,7] (7-1)x(2+2) (7-1)x2x2 [1,2,2,8] (2+2-1)x8 (2x2-1)x8 [1,2,2,9] (9+2+1)x2 [1,2,2,10] (10-2)x(2+1) (10+2)x2x1 (10+1)x2+2 [1,2,2,11] (11+2-1)x2 (11x2+2)x1 [1,2,2,12] (2-1)x12x2 (12+1)x2-2 (12-1)x2+2 (2/2+1)x12 [1,2,2,13] (13+1-2)x2 (13x2-2)x1 [1,2,3,3] (3+1)x3x2 [1,2,3,4] (3+2+1)x4 4x3x2x1 (4+2)x(3+1) [1,2,3,5] (5+3)x(2+1) (5+2+1)x3 (5-1)x3x2 (3+2)x5-1 [1,2,3,6] (3+2-1)x6 (6+2)x3x1 (3-1)x6x2 [1,2,3,7] 7x3+2+1 (2+1)x7+3 (7+2-1)x3 [1,2,3,8] (2-1)x8x3 (8-2)x(3+1) (8+3+1)x2 8/(1-2/3) [1,2,3,9] 9x3-2-1 (2+1)x9-3 (9+3)x2x1 (9+1-2)x3 [1,2,3,10] 10x2+3+1 (10-2)x3x1 (10+3-1)x2 (10+2)x(3-1) [1,2,3,11] (11-3)x(2+1) (11-2-1)x3 11x2+3-1 (3-1)x11+2 [1,2,3,12] (3+1-2)x12 (3+1)x12/2 12/(3/2-1) [1,2,3,13] 13x2+1-3 (3-1)x13-2 [1,2,4,4] (4+4)x(2+1) (4+2)x4x1 (4-1)x4x2 [1,2,4,5] (5+2-1)x4 (4+2)x(5-1) [1,2,4,6] (2-1)x6x4 (6+2)x(4-1) [1,2,4,7] (7+1-2)x4 (7+4+1)x2 [1,2,4,8] (8+4)x2x1 (4+1-2)x8 (8-2)x4x1 (4/2+1)x8 [1,2,4,9] (9-2-1)x4 (9+4-1)x2 (9+1)x2+4 [1,2,4,10] (10-2)x(4-1) (10x2+4)x1 (10/2+1)x4 [1,2,4,11] (11+1)x(4-2) (11+1)x4/2 (11-1)x2+4 [1,2,4,12] (12-4)x(2+1) (2+1)x4+12 12x4x1/2 (4-2)x12x1 12/(1-2/4) [1,2,4,13] (13+1)x2-4 (13-1)x(4-2) (13-1)x4/2 [1,2,5,5] 5x5+1-2 [1,2,5,6] (5+1-2)x6 (5+1)x(6-2) (6+5+1)x2 [1,2,5,7] (7+5)x2x1 (7+1)x(5-2) (7-2)x5-1 [1,2,5,8] (5+1)x8/2 (8+5-1)x2 (8-2)x(5-1) (5-2)x8x1 [1,2,5,9] (2+1)x5+9 9x2+5+1 (9-1)x(5-2) [1,2,5,10] 10x2+5-1 10x5/2-1 [1,2,5,11] [1,2,5,12] (5-2-1)x12 (5+1)x2+12 (5-1)x12/2 [1,2,5,13] (13-5)x(2+1) 5x2+13+1 [1,2,6,6] (2+1)x6+6 (6+6)x2x1 (6-2)x6x1 (6/2+1)x6 [1,2,6,7] (7-2-1)x6 (7+6-1)x2 (7+1)x6/2 (7-1)x(6-2) [1,2,6,8] (6-2-1)x8 8x6x1/2 (8+1)x2+6 [1,2,6,9] (9-1)x6/2 (9x2+6)x1 [1,2,6,10] (2+1)x10-6 (6+1)x2+10 (10-1)x2+6 (10/2-1)x6 [1,2,6,11] 6x2+11+1 [1,2,6,12] 12x6/(2+1) (6x2+12)x1 (6/2-1)x12 [1,2,6,13] 6x2+13-1 [1,2,7,7] (7x7-1)/2 [1,2,7,8] 8x2+7+1 (7+1)x2+8 (7-1)x8/2 [1,2,7,9] 9x2+7-1 7x2+9+1 [1,2,7,10] (7x2+10)x1 [1,2,7,11] 7x2+11-1 [1,2,7,12] (7-1)x2+12 [1,2,7,13] [1,2,8,8] (8x2+8)x1 (8/2-1)x8 [1,2,8,9] 9x8/(2+1) 8x2+9-1 (9-1)x2+8 [1,2,8,10] (8-1)x2+10 [1,2,8,11] [1,2,8,12] [1,2,8,13] 13+8+2+1 [1,2,9,9] [1,2,9,10] [1,2,9,11] (2+1)x11-9 [1,2,9,12] 12+9+2+1 [1,2,9,13] (13+9+2)x1 [1,2,10,10] [1,2,10,11] 11+10+2+1 [1,2,10,12] (12+10+2)x1 [1,2,10,13] 13+10+2-1 [1,2,11,11] (11+11+2)x1 [1,2,11,12] 12+11+2-1 2/(1-11/12) [1,2,11,13] (13+11)x(2-1) [1,2,12,12] (2+1)x12-12 (12+12)x(2-1) [1,2,12,13] 13+12+1-2 2/(13/12-1) [1,2,13,13] (13+13-2)x1 [1,3,3,3] (3+3)x(3+1) (3x3-1)x3 [1,3,3,4] (4+3+1)x3 (3-1)x4x3 (3+3)x4x1 [1,3,3,5] (5+3)x3x1 (3+3)x(5-1) [1,3,3,6] (6+3-1)x3 (6+1)x3+3 [1,3,3,7] (7x3+3)x1 [1,3,3,8] (8+1)x3-3 (8-1)x3+3 [1,3,3,9] (9-3)x(3+1) (9+3)x(3-1) (3-1/3)x9 (9x3-3)x1 [1,3,3,10] (10+1-3)x3 (10-1)x3-3 [1,3,3,11] (11-3)x3x1 [1,3,3,12] (3+1)x3+12 (12-3-1)x3 (3/3+1)x12 [1,3,3,13] [1,3,4,4] (4+4)x3x1 (4+3-1)x4 [1,3,4,5] 5x4+3+1 (3+1)x5+4 (5+4-1)x3 (5+3)x(4-1) [1,3,4,6] 6/(1-3/4) [1,3,4,7] 7x4-3-1 (3+1)x7-4 7x3+4-1 (4-1)x7+3 [1,3,4,8] (3+1)x4+8 (8+1-3)x4 (8+4)x(3-1) 8/(4/3-1) [1,3,4,9] (4+1)x3+9 (9-3)x4x1 9x3+1-4 (4-1)x9-3 [1,3,4,10] (10-4)x(3+1) (10-3-1)x4 (3-1)x10+4 [1,3,4,11] (11+1-4)x3 (11-3)x(4-1) 4x3+11+1 [1,3,4,12] (12-4)x3x1 (4+1-3)x12 12x4/(3-1) (4x3+12)x1 [1,3,4,13] (13-4-1)x3 4x3+13-1 [1,3,5,5] [1,3,5,6] 6x3+5+1 (5+1)x3+6 [1,3,5,7] (7+5)x(3-1) (5+1)x(7-3) [1,3,5,8] (5+1-3)x8 5x3+8+1 (8-3)x5-1 [1,3,5,9] (9-3)x(5-1) (5x3+9)x1 (5/3+1)x9 [1,3,5,10] 10x3-5-1 5x3+10-1 [1,3,5,11] (11-5)x(3+1) (11+1)x(5-3) [1,3,5,12] (5+1)x12/3 (12+1-5)x3 (5-1)x3+12 (5-3)x12x1 [1,3,5,13] (13-5)x3x1 (13-1)x(5-3) [1,3,6,6] (6+1-3)x6 (6+6)x(3-1) (6x3+6)x1 [1,3,6,7] (7-3)x6x1 (7+1)x(6-3) 6x3+7-1 (7-1)x3+6 [1,3,6,8] (8-3-1)x6 8x6/(3-1) (6-3)x8x1 (6/3+1)x8 [1,3,6,9] (3-1)x9+6 (6-1)x3+9 (9+1)x3-6 (9-1)x(6-3) (9/3+1)x6 [1,3,6,10] (10x3-6)x1 [1,3,6,11] (11+1)x6/3 (11-1)x3-6 [1,3,6,12] (12-6)x(3+1) (6-3-1)x12 12x6x1/3 (3-1)x6+12 12/(1-3/6) [1,3,6,13] (13+1-6)x3 (13-1)x6/3 [1,3,7,7] (7-1)x(7-3) [1,3,7,8] (7-3-1)x8 3/(1-7/8) [1,3,7,9] (7+1)x9/3 [1,3,7,10] (3-1)x7+10 10x3+1-7 [1,3,7,11] [1,3,7,12] (7-1)x12/3 [1,3,7,13] 13+7+3+1 (13-7)x(3+1) [1,3,8,8] (3+1)x8-8 (3-1)x8+8 (8+1)x8/3 [1,3,8,9] 9x8x1/3 3/(9/8-1) [1,3,8,10] (10-1)x8/3 [1,3,8,11] 11x3-8-1 [1,3,8,12] 12+8+3+1 12x8/(3+1) (12/3-1)x8 [1,3,8,13] (13+8+3)x1 [1,3,9,9] (9-1)x9/3 [1,3,9,10] (10+1)x3-9 [1,3,9,11] 11+9+3+1 (11x3-9)x1 (11/3-1)x9 [1,3,9,12] (3+1)x9-12 (12-1)x3-9 (12+9+3)x1 (9/3-1)x12 [1,3,9,13] 13+9+3-1 [1,3,10,10] 10+10+3+1 [1,3,10,11] 11x3+1-10 (11+10+3)x1 [1,3,10,12] 12+10+3-1 [1,3,10,13] [1,3,11,11] 11+11+3-1 [1,3,11,12] 12x3-11-1 (11+1)x3-12 [1,3,11,13] [1,3,12,12] (12x3-12)x1 [1,3,12,13] 12x3+1-13 (13-1)x3-12 [1,3,13,13] 13+13+1-3 [1,4,4,4] (4+1)x4+4 (4+4)x(4-1) [1,4,4,5] (5x4+4)x1 [1,4,4,6] (6+1)x4-4 (6-1)x4+4 [1,4,4,7] 4x4+7+1 (7x4-4)x1 [1,4,4,8] (8-1)x4-4 (4x4+8)x1 [1,4,4,9] (9+1-4)x4 4x4+9-1 [1,4,4,10] (10-4)x4x1 [1,4,4,11] (11-4-1)x4 [1,4,4,12] (12-4)x(4-1) (4-1)x4+12 (4/4+1)x12 [1,4,4,13] [1,4,5,5] 5x4+5-1 (5-1)x5+4 [1,4,5,6] 6/(5/4-1) 4/(1-5/6) [1,4,5,7] 7x4+1-5 (5-1)x7-4 [1,4,5,8] (5+1)x(8-4) (5-1)x4+8 [1,4,5,9] (4-1)x5+9 (9-4)x5-1 [1,4,5,10] (10+1-5)x4 (10-4)x(5-1) [1,4,5,11] (11-5)x4x1 [1,4,5,12] (5+1-4)x12 (12-5-1)x4 [1,4,5,13] (13-5)x(4-1) [1,4,6,6] (4+1)x6-6 (4-1)x6+6 [1,4,6,7] (7+1-4)x6 4/(7/6-1) [1,4,6,8] (6+1-4)x8 (8-4)x6x1 8/(1-4/6) [1,4,6,9] (9-4-1)x6 [1,4,6,10] (4-1)x10-6 [1,4,6,11] (11+1-6)x4 (11+1)x(6-4) [1,4,6,12] (12-6)x4x1 12x6/(4-1) (6-4)x12x1 12/(6/4-1) (12/4+1)x6 [1,4,6,13] 13+6+4+1 (13-6-1)x4 (13-1)x(6-4) [1,4,7,7] (7+1)x(7-4) [1,4,7,8] 8x4-7-1 (7+1)x4-8 (7-1)x(8-4) (7-4)x8x1 [1,4,7,9] (9-1)x(7-4) [1,4,7,10] [1,4,7,11] (4+1)x7-11 [1,4,7,12] 12+7+4+1 (7-4-1)x12 (7+1)x12/4 (12+1-7)x4 [1,4,7,13] (13-7)x4x1 (13+7+4)x1 [1,4,8,8] (8-4-1)x8 (8x4-8)x1 (8/4+1)x8 [1,4,8,9] 9x8/(4-1) 8x4+1-9 (9-1)x4-8 [1,4,8,10] [1,4,8,11] 11+8+4+1 (11+1)x8/4 [1,4,8,12] 12x8x1/4 (8+1)x4-12 (12+8+4)x1 12/(1-4/8) [1,4,8,13] 13+8+4-1 (13+1-8)x4 (13-1)x8/4 [1,4,9,9] [1,4,9,10] 10+9+4+1 [1,4,9,11] (4-1)x11-9 9x4-11-1 (11+9+4)x1 [1,4,9,12] 12+9+4-1 (9-1)x12/4 (9x4-12)x1 [1,4,9,13] 9x4+1-13 [1,4,10,10] (10+10+4)x1 10x10/4-1 [1,4,10,11] 11+10+4-1 [1,4,10,12] 12x10/(4+1) (10-1)x4-12 4/(1-10/12) [1,4,10,13] [1,4,11,11] [1,4,11,12] [1,4,11,13] [1,4,12,12] (4-1)x12-12 (12/4-1)x12 [1,4,12,13] [1,4,13,13] [1,5,5,5] (5-1/5)x5 [1,5,5,6] 6x5-5-1 (5+1)x5-6 [1,5,5,7] [1,5,5,8] [1,5,5,9] (5+1)x(9-5) [1,5,5,10] (10-5)x5-1 [1,5,5,11] (11-5)x(5-1) [1,5,5,12] (5/5+1)x12 [1,5,5,13] 13+5+5+1 [1,5,6,6] (6x5-6)x1 [1,5,6,7] 6x5+1-7 (7-1)x5-6 [1,5,6,8] (8+1-5)x6 [1,5,6,9] (9-5)x6x1 [1,5,6,10] (5+1)x(10-6) (10-5-1)x6 [1,5,6,11] (6+1)x5-11 (11-6)x5-1 [1,5,6,12] 12+6+5+1 (5+1)x6-12 (6+1-5)x12 (12-6)x(5-1) [1,5,6,13] (13+6+5)x1 [1,5,7,7] [1,5,7,8] (7+1-5)x8 (7+1)x(8-5) [1,5,7,9] (7-1)x(9-5) [1,5,7,10] 7x5-10-1 (7/5+1)x10 [1,5,7,11] 11+7+5+1 (5+1)x(11-7) (11+1)x(7-5) (7x5-11)x1 [1,5,7,12] (7-5)x12x1 7x5+1-12 (12+7+5)x1 (12-7)x5-1 [1,5,7,13] 13+7+5-1 (13-7)x(5-1) (13-1)x(7-5) [1,5,8,8] (5-1)x8-8 (8-5)x8x1 [1,5,8,9] (9-5-1)x8 (9-1)x(8-5) 9/(1-5/8) [1,5,8,10] 10+8+5+1 (10/5+1)x8 [1,5,8,11] (8-1)x5-11 (11+8+5)x1 [1,5,8,12] (5+1)x(12-8) (8-5-1)x12 12+8+5-1 12x8/(5-1) [1,5,8,13] (13-8)x5-1 [1,5,9,9] 9+9+5+1 [1,5,9,10] (10+9+5)x1 [1,5,9,11] 11+9+5-1 [1,5,9,12] (5-1)x9-12 (9+1)x12/5 [1,5,9,13] (5+1)x(13-9) [1,5,10,10] 10+10+5-1 [1,5,10,11] (11+1)x10/5 [1,5,10,12] 12x10x1/5 12/(1-5/10) [1,5,10,13] (13-1)x10/5 [1,5,11,11] (11x11-1)/5 [1,5,11,12] (11-1)x12/5 [1,5,11,13] [1,5,12,12] 12x12/(5+1) [1,5,12,13] [1,5,13,13] [1,6,6,6] (6-1)x6-6 [1,6,6,7] [1,6,6,8] 6/(1-6/8) [1,6,6,9] (9+1-6)x6 [1,6,6,10] (10-6)x6x1 [1,6,6,11] 11+6+6+1 (11-6-1)x6 6x6-11-1 [1,6,6,12] (12+6+6)x1 (6x6-12)x1 (6/6+1)x12 [1,6,6,13] 13+6+6-1 6x6+1-13 [1,6,7,7] [1,6,7,8] [1,6,7,9] (7+1)x(9-6) [1,6,7,10] 10+7+6+1 (10+1-7)x6 (7-1)x(10-6) [1,6,7,11] (11-7)x6x1 (6-1)x7-11 (11+7+6)x1 [1,6,7,12] 12+7+6-1 (7+1-6)x12 (12-7-1)x6 (7-1)x6-12 [1,6,7,13] [1,6,8,8] (8+1-6)x8 8/(8/6-1) [1,6,8,9] 9+8+6+1 (9-6)x8x1 8/(1-6/9) [1,6,8,10] (10-6-1)x8 (10+8+6)x1 6/(10/8-1) [1,6,8,11] 11+8+6-1 (11+1-8)x6 (11+1)x(8-6) [1,6,8,12] (12-8)x6x1 (8-6)x12x1 (12/6+1)x8 [1,6,8,13] (13-8-1)x6 (13-1)x(8-6) [1,6,9,9] (9-1)x(9-6) (9+9+6)x1 [1,6,9,10] 10+9+6-1 (10/6+1)x9 [1,6,9,11] [1,6,9,12] (9-6-1)x12 (12+1-9)x6 12/(9/6-1) 6/(1-9/12) [1,6,9,13] (13-9)x6x1 [1,6,10,10] [1,6,10,11] [1,6,10,12] 12x10/(6-1) [1,6,10,13] (13+1-10)x6 [1,6,11,11] [1,6,11,12] (11+1)x12/6 [1,6,11,13] (13x11+1)/6 [1,6,12,12] 12x12x1/6 12/(1-6/12) [1,6,12,13] (13-1)x12/6 [1,6,13,13] [1,7,7,7] [1,7,7,8] [1,7,7,9] 9+7+7+1 [1,7,7,10] (7+1)x(10-7) (10+7+7)x1 [1,7,7,11] 11+7+7-1 (7-1)x(11-7) [1,7,7,12] (7/7+1)x12 [1,7,7,13] [1,7,8,8] 8+8+7+1 [1,7,8,9] (9+1-7)x8 (9+8+7)x1 [1,7,8,10] 10+8+7-1 (10-7)x8x1 [1,7,8,11] (7+1)x(11-8) (11-7-1)x8 [1,7,8,12] (8+1-7)x12 (7-1)x(12-8) [1,7,8,13] [1,7,9,9] 9+9+7-1 [1,7,9,10] (9-1)x(10-7) [1,7,9,11] (11+1)x(9-7) [1,7,9,12] (7+1)x(12-9) (9-7)x12x1 [1,7,9,13] (7-1)x(13-9) (13-1)x(9-7) [1,7,10,10] [1,7,10,11] [1,7,10,12] (10-7-1)x12 10/(1-7/12) [1,7,10,13] (7+1)x(13-10) [1,7,11,11] [1,7,11,12] [1,7,11,13] [1,7,12,12] 12x12/(7-1) [1,7,12,13] (13+1)x12/7 [1,7,13,13] (13x13-1)/7 [1,8,8,8] (8+8+8)x1 [1,8,8,9] 9+8+8-1 [1,8,8,10] (10+1-8)x8 [1,8,8,11] (11-8)x8x1 [1,8,8,12] (12-8-1)x8 (8/8+1)x12 8/(1-8/12) [1,8,8,13] [1,8,9,9] [1,8,9,10] [1,8,9,11] (11+1-9)x8 (9-1)x(11-8) 9/(11/8-1) [1,8,9,12] (12-9)x8x1 (9+1-8)x12 8/(12/9-1) [1,8,9,13] (13-9-1)x8 [1,8,10,10] [1,8,10,11] (11+1)x(10-8) [1,8,10,12] (12+1-10)x8 (10-8)x12x1 [1,8,10,13] (13-10)x8x1 (13-1)x(10-8) [1,8,11,11] [1,8,11,12] (11-8-1)x12 [1,8,11,13] (13+1-11)x8 [1,8,12,12] 12/(12/8-1) [1,8,12,13] [1,8,13,13] [1,9,9,9] [1,9,9,10] [1,9,9,11] [1,9,9,12] (9-1)x(12-9) (9/9+1)x12 [1,9,9,13] [1,9,10,10] [1,9,10,11] [1,9,10,12] (10+1-9)x12 [1,9,10,13] (9-1)x(13-10) [1,9,11,11] (11+1)x(11-9) [1,9,11,12] (11-9)x12x1 [1,9,11,13] (13-1)x(11-9) [1,9,12,12] (12-9-1)x12 [1,9,12,13] [1,9,13,13] [1,10,10,10] [1,10,10,11] [1,10,10,12] (10/10+1)x12 [1,10,10,13] [1,10,11,11] [1,10,11,12] (11+1-10)x12 (11+1)x(12-10) [1,10,11,13] [1,10,12,12] (12-10)x12x1 [1,10,12,13] (13-10-1)x12 (13-1)x(12-10) [1,10,13,13] [1,11,11,11] [1,11,11,12] (11/11+1)x12 [1,11,11,13] (11+1)x(13-11) (13/11+1)x11 [1,11,12,12] (12+1-11)x12 [1,11,12,13] (13-11)x12x1 [1,11,13,13] (13-1)x(13-11) (11/13+1)x13 [1,12,12,12] (12/12+1)x12 [1,12,12,13] (13+1-12)x12 [1,12,13,13] (13/13+1)x12 [1,13,13,13] [2,2,2,2] [2,2,2,3] (2+2)x3x2 3x2x2x2 [2,2,2,4] (4+2)x(2+2) (2+2+2)x4 (4+2)x2x2 (2x2+2)x4 [2,2,2,5] (5x2+2)x2 [2,2,2,6] [2,2,2,7] (7x2-2)x2 [2,2,2,8] (8-2)x(2+2) (8+2+2)x2 (8-2)x2x2 (2x2+8)x2 (2/2+2)x8 [2,2,2,9] (9+2)x2+2 [2,2,2,10] 10x2+2+2 10x2+2x2 [2,2,2,11] (2/2+11)x2 (11+2)x2-2 [2,2,2,12] (2+2)x12/2 (2x2-2)x12 12x2+2-2 [2,2,2,13] (13-2/2)x2 (13-2)x2+2 [2,2,3,3] (3+3)x(2+2) (3+3)x2x2 (3x2+2)x3 [2,2,3,4] (4+2+2)x3 (2x2+4)x3 [2,2,3,5] (5x2-2)x3 [2,2,3,6] (2/2+3)x6 (6-2)x3x2 (3x2-2)x6 (3x2+6)x2 [2,2,3,7] (2/2+7)x3 (7+3+2)x2 [2,2,3,8] 8x3+2-2 (8+3)x2+2 [2,2,3,9] (9-3)x(2+2) (9-3)x2x2 (9-2/2)x3 9x2+3x2 (2/3+2)x9 [2,2,3,10] (10+3)x2-2 [2,2,3,11] (11+3-2)x2 [2,2,3,12] (2+2)x3+12 (12-2-2)x3 3x2x2+12 (12-2x2)x3 (3-2/2)x12 (3-2)x12x2 12/(2-3/2) (12/2+2)x3 [2,2,3,13] (13+2-3)x2 [2,2,4,4] (4x2-2)x4 (4x2+4)x2 [2,2,4,5] 5x4+2+2 (2+2)x5+4 5x4+2x2 5x2x2+4 (2/2+5)x4 (5-2)x4x2 [2,2,4,6] 6x4+2-2 (4+2)x(6-2) (6+4+2)x2 (4-2)x6x2 (4/2+2)x6 [2,2,4,7] 7x4-2-2 (2+2)x7-4 7x4-2x2 7x2x2-4 (7-2/2)x4 (7+4)x2+2 [2,2,4,8] (2+2)x4+8 4x2x2+8 (4-2/2)x8 (4+2)x8/2 8x2+4x2 (8+2)x2+4 (8x2-4)x2 (8/2+2)x4 [2,2,4,9] 9x2+4+2 (9+4)x2-2 [2,2,4,10] (10-4)x(2+2) (10-2-2)x4 (10-4)x2x2 (10-2x2)x4 (10+4-2)x2 (10+2)x(4-2) (10+2)x4/2 (4/2+10)x2 [2,2,4,11] 11x2+4-2 (4-2)x11+2 11x4/2+2 11x2+4/2 [2,2,4,12] (4+2)x2+12 (12+2)x2-4 (12-2)x2+4 [2,2,4,13] 13x2+2-4 (4-2)x13-2 13x4/2-2 13x2-4/2 [2,2,5,5] 5x5-2/2 (5+5+2)x2 [2,2,5,6] (5-2/2)x6 (6+2)x(5-2) (6+5)x2+2 [2,2,5,7] 7x2+5x2 [2,2,5,8] (8+5)x2-2 [2,2,5,9] (9+5-2)x2 [2,2,5,10] (5+2)x2+10 (10-2)x(5-2) (2/5+2)x10 (10x5-2)/2 [2,2,5,11] (11-5)x(2+2) (11-5)x2x2 [2,2,5,12] 5x2+12+2 12/(5/2-2) [2,2,5,13] [2,2,6,6] (6+2)x6/2 6x2+6x2 [2,2,6,7] (7+2)x2+6 (7+6)x2-2 [2,2,6,8] (8-2-2)x6 (8-2x2)x6 8x2+6+2 (6+2)x2+8 (8+6-2)x2 (8-2)x(6-2) [2,2,6,9] (6/2+9)x2 (9x2-6)x2 [2,2,6,10] 6x2+10+2 10x2+6-2 (10-2)x6/2 [2,2,6,11] (11-2)x2+6 [2,2,6,12] (12-6)x(2+2) (6-2-2)x12 (12-6)x2x2 (6-2x2)x12 (6-2)x12/2 (12/2-2)x6 (12/2+6)x2 [2,2,6,13] (13+2)x2-6 [2,2,7,7] (7+7-2)x2 [2,2,7,8] (7-2-2)x8 (7-2x2)x8 7x2+8+2 [2,2,7,9] [2,2,7,10] (10/2+7)x2 [2,2,7,11] [2,2,7,12] 7x2+12-2 [2,2,7,13] 13+7+2+2 (13-7)x(2+2) 2x2+13+7 (13-7)x2x2 [2,2,8,8] (2+2)x8-8 8x2x2-8 (8-2)x8/2 (8/2+8)x2 [2,2,8,9] 9x2+8-2 [2,2,8,10] 8x2+10-2 10x2+8/2 (10x2-8)x2 (10-2)x2+8 (10/2-2)x8 [2,2,8,11] [2,2,8,12] 12+8+2+2 12x8/(2+2) 12x8/2/2 2x2+12+8 (8-2)x2+12 (8/2-2)x12 [2,2,8,13] [2,2,9,9] [2,2,9,10] (9-2)x2+10 [2,2,9,11] 11+9+2+2 2x2+11+9 [2,2,9,12] (2+2)x9-12 9x2x2-12 9x2+12/2 [2,2,9,13] [2,2,10,10] 10+10+2+2 2x2+10+10 [2,2,10,11] (11x2-10)x2 [2,2,10,12] [2,2,10,13] 2/2+13+10 [2,2,11,11] (2/11+2)x11 [2,2,11,12] 2/2+12+11 [2,2,11,13] 13+11+2-2 [2,2,12,12] 12+12+2-2 (12x2-12)x2 [2,2,12,13] 13+12-2/2 [2,2,13,13] (2-2/13)x13 [2,3,3,3] (3+3+2)x3 (3x3+3)x2 [2,3,3,4] [2,3,3,5] (5+2)x3+3 (5x3-3)x2 [2,3,3,6] 6x3+3x2 3x3x2+6 (3+3-2)x6 (3+3)x(6-2) (6+3+3)x2 [2,3,3,7] (7-3)x3x2 (7+3-2)x3 (7+2)x3-3 [2,3,3,8] (3x2-3)x8 (3-2)x8x3 (3+3)x8/2 (3/3+2)x8 [2,3,3,9] (3+2)x3+9 (9+2-3)x3 9x2+3+3 (9-2)x3+3 [2,3,3,10] 10x3-3x2 (10/2+3)x3 [2,3,3,11] (11-2)x3-3 (3/3+11)x2 [2,3,3,12] 12x2+3-3 (3+3)x2+12 [2,3,3,13] (13-3-2)x3 (13+3)x3/2 3x3+13+2 (13-3/3)x2 [2,3,4,4] (3+2)x4+4 4x4x3/2 (4-2)x4x3 [2,3,4,5] (5+3-2)x4 (5+4+3)x2 [2,3,4,6] (3-2)x6x4 6x3+4+2 (4+2)x3+6 (6-3)x4x2 (6+4-2)x3 (4/2+6)x3 6x2+4x3 (6x2-4)x3 (6/2+3)x4 [2,3,4,7] (7+2-3)x4 (4+2)x(7-3) (7+3)x2+4 [2,3,4,8] (8-4)x3x2 (4+2-3)x8 (8/2+4)x3 [2,3,4,9] 9x4x2/3 (9+3)x(4-2) (9+3)x4/2 [2,3,4,10] 10x3-4-2 (10+2-4)x3 (10-4/2)x3 4x3+10+2 (4+3)x2+10 [2,3,4,11] (11-3-2)x4 (11+4-3)x2 (11+3)x2-4 [2,3,4,12] (3x2-4)x12 (12-3x2)x4 (12+4)x3/2 (4+2)x12/3 (4-3)x12x2 (12/3+2)x4 [2,3,4,13] 4x2+13+3 (13+3-4)x2 (13-3)x2+4 [2,3,5,5] 5x5+2-3 (5+5-2)x3 (5+3)x(5-2) [2,3,5,6] 6x5-3x2 5x3x2-6 (5+2-3)x6 (5-3)x6x2 (5+3)x6/2 (6/2+5)x3 [2,3,5,7] 7x3+5-2 (5-2)x7+3 5x3+7+2 [2,3,5,8] 8x2+5+3 (5+3)x2+8 8/(2-5/3) [2,3,5,9] (9-5)x3x2 9x3+2-5 (5-2)x9-3 (9x5+3)/2 [2,3,5,10] (10+2)x(5-3) (10+5-3)x2 [2,3,5,11] (11+5)x3/2 5x2+11+3 (11+2-5)x3 (11-3)x(5-2) 11x2+5-3 5x3+11-2 (5-3)x11+2 [2,3,5,12] 12/(3-5/2) [2,3,5,13] 3x2+13+5 13x2+3-5 (5-3)x13-2 [2,3,6,6] (3+2)x6-6 6x6x2/3 (6+2)x(6-3) (6+3)x2+6 (6x3-6)x2 (6/3+2)x6 [2,3,6,7] 7x6/2+3 7x3+6/2 (7x2-6)x3 [2,3,6,8] (8+2)x3-6 6x3+8-2 (8-2)x3+6 [2,3,6,9] (9-3-2)x6 (6+2)x9/3 6x2+9+3 (9-3)x(6-2) (3-2/6)x9 9x6/2-3 9x3-6/2 (9+6-3)x2 [2,3,6,10] (10-6)x3x2 (10-3x2)x6 (10+6)x3/2 (10+2)x6/3 (10-2)x(6-3) (6/3+10)x2 [2,3,6,11] (11-3)x6/2 (11-6/2)x3 11x2+6/3 11x6/3+2 [2,3,6,12] 3x2+12+6 6x3x2-12 12x3/2+6 12x3-6x2 (12+2-6)x3 (6-2)x3+12 (12-2)x3-6 6x3+12/2 (12+3)x2-6 (12-3)x2+6 [2,3,6,13] 13+6+3+2 13x2-6/3 13x6/3-2 [2,3,7,7] 7x2+7+3 [2,3,7,8] (7+2)x8/3 (8-2)x(7-3) (8+7-3)x2 8/(7/3-2) [2,3,7,9] (9+7)x3/2 (7-2)x3+9 (7x3-9)x2 [2,3,7,10] 10x2+7-3 (10x7+2)/3 [2,3,7,11] (3+2)x7-11 3x2+11+7 (11-7)x3x2 11x3-7-2 [2,3,7,12] 12+7+3+2 (7-3-2)x12 12/(7/2-3) (7-3)x12/2 [2,3,7,13] 7x2+13-3 (13+2-7)x3 [2,3,8,8] (8-3-2)x8 (8+8)x3/2 (8x2-8)x3 [2,3,8,9] (9-3x2)x8 (9-3)x8/2 [2,3,8,10] 3x2+10+8 10x3+2-8 [2,3,8,11] 11+8+3+2 8x2+11-3 (11-2)x8/3 (11-3)x2+8 [2,3,8,12] (12-8)x3x2 (8-3x2)x12 8x3/2+12 (8-2)x12/3 (12-8/2)x3 (12/2-3)x8 (8x3-12)x2 (12/3+8)x2 [2,3,8,13] (13+3)x2-8 [2,3,9,9] 3x2+9+9 (9+2)x3-9 9x2+9-3 (9/3+9)x2 [2,3,9,10] 10+9+3+2 10x3/2+9 (9x2-10)x3 (10-2)x9/3 [2,3,9,11] [2,3,9,12] (9-3)x2+12 [2,3,9,13] (13-9)x3x2 (13-2)x3-9 (13x3+9)/2 [2,3,10,10] (10-3)x2+10 [2,3,10,11] [2,3,10,12] 12x10/(3+2) 12x3-10-2 (10+2)x3-12 10x2+12/3 (10x2-12)x3 (10/2-3)x12 10x3-12/2 [2,3,10,13] 13+10+3-2 (13-10/2)x3 [2,3,11,11] 11x3+2-11 [2,3,11,12] 12+11+3-2 [2,3,11,13] (13+11)x(3-2) [2,3,12,12] 12x12/3/2 (12+12)x(3-2) (12x3+12)/2 (12/3-2)x12 [2,3,12,13] 13+12+2-3 [2,3,13,13] 13x3-13-2 [2,4,4,4] 4x4+4x2 (4+4-2)x4 (4/2+4)x4 (4+4+4)x2 (4x4-4)x2 [2,4,4,5] (5+2)x4-4 (5x2-4)x4 (4+4)x(5-2) [2,4,4,6] (4x2-4)x6 4x4+6+2 (4+4)x6/2 (6+4)x2+4 [2,4,4,7] (7-4)x4x2 (7-2)x4+4 [2,4,4,8] (4+2)x(8-4) 8x4-4x2 4x4x2-8 (8+2-4)x4 (8+4)x(4-2) (8+4)x4/2 (8-4/2)x4 8x2+4+4 (4+4)x2+8 (4/4+2)x8 [2,4,4,9] (9-2)x4-4 [2,4,4,10] (4-2)x10+4 10x4/2+4 4x4+10-2 (10+4)x2-4 [2,4,4,11] (4/4+11)x2 (11x4+4)/2 [2,4,4,12] (12-4-2)x4 4x2+12+4 12x4/(4-2) (4-4/2)x12 12x2+4-4 [2,4,4,13] (13-4/4)x2 (13x4-4)/2 [2,4,5,5] (5+5)x2+4 [2,4,5,6] 6x5-4-2 (4+2)x5-6 5x4+6-2 (6-2)x5+4 (5+4)x2+6 [2,4,5,7] (7+5)x(4-2) (7+5)x4/2 [2,4,5,8] (8-5)x4x2 (4x2-5)x8 (5+2-4)x8 (5-4/2)x8 8x5/2+4 5x4+8/2 (5x4-8)x2 [2,4,5,9] (4+2)x(9-5) (9+2-5)x4 (9+5)x2-4 [2,4,5,10] 5x2+10+4 [2,4,5,11] 4x2+11+5 (11+5-4)x2 [2,4,5,12] (12-4)x(5-2) (5-2)x4+12 (5-4)x12x2 [2,4,5,13] 13+5+4+2 (13-5-2)x4 (13+4-5)x2 [2,4,6,6] (6+2-4)x6 (6+6)x(4-2) (6+6)x4/2 (6-4/2)x6 (6-4)x6x2 (6x2-6)x4 [2,4,6,7] (6+2)x(7-4) 7x4+2-6 (6-2)x7-4 7x2+6+4 6/(2-7/4) [2,4,6,8] 8x6/(4-2) 8x6x2/4 8x4-6-2 (6+2)x4-8 6x2+8+4 (6-2)x4+8 (8/4+2)x6 (8+6)x2-4 [2,4,6,9] (9-6)x4x2 (4-2)x9+6 9x4/2+6 9x4-6x2 (9-6/2)x4 (4/6+2)x9 6/(9/4-2) [2,4,6,10] (4+2)x(10-6) (10-4-2)x6 4x2+10+6 (10+2-6)x4 (10-4)x(6-2) (10+2)x(6-4) (10+6-4)x2 [2,4,6,11] 11x2+6-4 (6-4)x11+2 (11+4)x2-6 4/(2-11/6) [2,4,6,12] 12+6+4+2 (4+2)x6-12 (4x2-6)x12 (12-4x2)x6 (4-2)x6+12 6x4/2+12 (6+2)x12/4 (12-4)x6/2 (6x4-12)x2 12/(2-6/4) [2,4,6,13] 13x2+4-6 (6-4)x13-2 (13-4)x2+6 4/(13/6-2) [2,4,7,7] (7+7)x2-4 [2,4,7,8] (7x2-8)x4 8x7/2-4 7x4-8/2 [2,4,7,9] 4x2+9+7 (9+7-4)x2 [2,4,7,10] (10-7)x4x2 (4-2)x7+10 7x4/2+10 (10-2)x(7-4) [2,4,7,11] 11+7+4+2 (4+2)x(11-7) (11+2-7)x4 [2,4,7,12] (7+2)x4-12 12/(4-7/2) [2,4,7,13] [2,4,8,8] 4x2+8+8 (4-2)x8+8 8x4/2+8 (8-2)x(8-4) (8+8-4)x2 [2,4,8,9] (9-4-2)x8 [2,4,8,10] 10+8+4+2 10x4-8x2 (8x2-10)x4 (10-4)x8/2 (10-8/2)x4 (10+2)x8/4 10x2+8-4 8x4+2-10 (10-2)x4-8 (8/4+10)x2 (10x4+8)/2 [2,4,8,11] (11-8)x4x2 (11-4x2)x8 11x2+8/4 11x8/4+2 [2,4,8,12] (4+2)x(12-8) (8-4-2)x12 8x2+12-4 (12+2-8)x4 (8-4)x12/2 (12+4)x2-8 (12-4)x2+8 [2,4,8,13] 13x2-8/4 13x8/4-2 [2,4,9,9] 9+9+4+2 [2,4,9,10] 9x2+10-4 9x4-10-2 [2,4,9,11] [2,4,9,12] (12-9)x4x2 (9x2-12)x4 12/(9/2-4) (9x4+12)/2 (12/4+9)x2 [2,4,9,13] (4+2)x(13-9) 13+9+4-2 4/2+13+9 (13+2-9)x4 [2,4,10,10] (4/10+2)x10 [2,4,10,11] 11x4-10x2 (11-10/2)x4 (11-4)x2+10 [2,4,10,12] (10-4x2)x12 12+10+4-2 4/2+12+10 (10-2)x12/4 (10-4)x2+12 12/(10/4-2) [2,4,10,13] (13-10)x4x2 (13+4)x2-10 [2,4,11,11] 11+11+4-2 4/2+11+11 [2,4,11,12] (11-2)x4-12 [2,4,11,13] [2,4,12,12] 12x12/(4+2) 12x4-12x2 (12/2-4)x12 (12-12/2)x4 [2,4,12,13] [2,4,13,13] 13+13+2-4 13+13-4/2 [2,5,5,5] [2,5,5,6] [2,5,5,7] 7x2+5+5 [2,5,5,8] (5/5+2)x8 [2,5,5,9] 5x2+9+5 (5-2)x5+9 [2,5,5,10] (5-2/10)x5 [2,5,5,11] (5+2)x5-11 (5/5+11)x2 [2,5,5,12] 12+5+5+2 12x2+5-5 [2,5,5,13] (13-5)x(5-2) (5x5-13)x2 (13-5/5)x2 [2,5,6,6] (5x2-6)x6 (5-2)x6+6 [2,5,6,7] (7+2-5)x6 6x2+7+5 (7-5)x6x2 [2,5,6,8] 5x2+8+6 (6+2-5)x8 (6+2)x(8-5) 6x5+2-8 (8-2)x5-6 [2,5,6,9] 6x5/2+9 [2,5,6,10] (5-2)x10-6 10x6x2/5 (10+5)x2-6 (10/5+2)x6 [2,5,6,11] 11+6+5+2 (11-5-2)x6 (11-5)x(6-2) (11+6-5)x2 [2,5,6,12] 12x6/(5-2) 12x5/2-6 (5-6/2)x12 (6-5)x12x2 6x5-12/2 [2,5,6,13] (13-5)x6/2 (13+5-6)x2 [2,5,7,7] 5x2+7+7 [2,5,7,8] (5x2-7)x8 [2,5,7,9] 7x5-9-2 [2,5,7,10] 10+7+5+2 (10+2)x(7-5) (10+7-5)x2 [2,5,7,11] 11x2+7-5 (7-5)x11+2 (11x5-7)/2 [2,5,7,12] [2,5,7,13] 13x2+5-7 7x5+2-13 (7x5+13)/2 (7-5)x13-2 [2,5,8,8] 8x5-8x2 (8x5+8)/2 [2,5,8,9] 9+8+5+2 9x8/(5-2) (8-2)x(9-5) (9+8-5)x2 [2,5,8,10] (10-5-2)x8 (10-2)x(8-5) [2,5,8,11] (11-5)x8/2 (11+5)x2-8 [2,5,8,12] (5x2-8)x12 (8+2)x12/5 [2,5,8,13] (13-5x2)x8 13+8+5-2 8x2+13-5 (13+2)x8/5 (13-5)x2+8 [2,5,9,9] [2,5,9,10] 10x2+9-5 [2,5,9,11] (5-2)x11-9 9x2+11-5 (9-2)x5-11 [2,5,9,12] (9-5-2)x12 12+9+5-2 12/(5-9/2) (9-5)x12/2 [2,5,9,13] [2,5,10,10] (10+2)x10/5 (10/5+10)x2 [2,5,10,11] 11+10+5-2 11x2+10/5 11x10/5+2 [2,5,10,12] (12+5)x2-10 (12-5)x2+10 [2,5,10,13] 10x5-13x2 13x2-10/5 13x10/5-2 [2,5,11,11] [2,5,11,12] 12/(11/2-5) (11-5)x2+12 [2,5,11,13] [2,5,12,12] (12-5x2)x12 (5-2)x12-12 (12-2)x12/5 (12x5-12)/2 [2,5,12,13] 12/2+13+5 (13+5)x2-12 [2,5,13,13] [2,6,6,6] 6x2+6+6 6x6-6x2 6x6/2+6 [2,6,6,7] (7-6/2)x6 (7-2)x6-6 (7x6+6)/2 [2,6,6,8] (8-6)x6x2 (6x2-8)x6 (8+2-6)x6 (6-6/2)x8 (6/6+2)x8 [2,6,6,9] (6+2)x(9-6) (9+6)x2-6 (9x6-6)/2 [2,6,6,10] 10+6+6+2 10x6/2-6 6x6-10-2 [2,6,6,11] (6/6+11)x2 [2,6,6,12] (12-6-2)x6 (12-6)x(6-2) 12x2+6-6 (6x6+12)/2 (12/6+2)x6 [2,6,6,13] (13-6/6)x2 [2,6,7,7] [2,6,7,8] (7+2-6)x8 (8+7)x2-6 [2,6,7,9] 9+7+6+2 (9-7)x6x2 (9+2-7)x6 7x6-9x2 [2,6,7,10] (6+2)x(10-7) (7x2-10)x6 [2,6,7,11] (11+7-6)x2 [2,6,7,12] (7-6)x12x2 [2,6,7,13] 13+7+6-2 (13-7)x(6-2) (13-7-2)x6 (13+6-7)x2 [2,6,8,8] 8+8+6+2 (6-2)x8-8 (8-8/2)x6 [2,6,8,9] (6x2-9)x8 9x8x2/6 [2,6,8,10] (10-8)x6x2 (10+2-8)x6 (8-2)x(10-6) (10+2)x(8-6) (10+8-6)x2 (10+6)x2-8 8/(2-10/6) [2,6,8,11] (6+2)x(11-8) (11-6-2)x8 11x2+8-6 (8-6)x11+2 [2,6,8,12] 12+8+6-2 12x8/(6-2) (8x2-12)x6 (8-2)x6-12 (12-6)x8/2 (6-8/2)x12 8x6-12x2 [2,6,8,13] 6/2+13+8 13x2+6-8 (8-6)x13-2 [2,6,9,9] (9+9-6)x2 (6/9+2)x9 [2,6,9,10] (10-2)x(9-6) (9-10/2)x6 [2,6,9,11] (11-9)x6x2 11+9+6-2 11x6/2-9 (11+2-9)x6 [2,6,9,12] (6+2)x(12-9) (6-2)x9-12 6/2+12+9 9x2+12-6 12/(2-9/6) [2,6,9,13] [2,6,10,10] 10+10+6-2 10x2+10-6 [2,6,10,11] 6/2+11+10 (11+6)x2-10 [2,6,10,12] (10-6-2)x12 (12-10)x6x2 (6x2-10)x12 (10+2)x12/6 (12+2-10)x6 (10-6)x12/2 (10-12/2)x6 (10x6-12)/2 (12/6+10)x2 [2,6,10,13] (6+2)x(13-10) 10/2+13+6 (13-6)x2+10 [2,6,11,11] [2,6,11,12] 11x2+12/6 12/(6-11/2) 12x11/6+2 [2,6,11,13] (13-11)x6x2 (13+2-11)x6 [2,6,12,12] 12x6/2-12 12/2+12+6 (12+6)x2-12 (12-6)x2+12 [2,6,12,13] 13x2-12/6 12/(13/2-6) 13x12/6-2 [2,6,13,13] [2,7,7,7] [2,7,7,8] 8+7+7+2 (7/7+2)x8 [2,7,7,9] [2,7,7,10] (10/7+2)x7 [2,7,7,11] (7-2)x7-11 (7/7+11)x2 [2,7,7,12] 12+7+7-2 12x2+7-7 [2,7,7,13] (13-7/7)x2 [2,7,8,8] (8+2-7)x8 (7-8/2)x8 (8x7-8)/2 [2,7,8,9] (9+7)x2-8 [2,7,8,10] [2,7,8,11] (7x2-11)x8 11+8+7-2 (8-2)x(11-7) (11+8-7)x2 [2,7,8,12] (12-7-2)x8 (8-7)x12x2 [2,7,8,13] (13-7)x8/2 8/2+13+7 (13+7-8)x2 [2,7,9,9] [2,7,9,10] 10+9+7-2 (10+2)x(9-7) (10+9-7)x2 [2,7,9,11] 11x2+9-7 (9-7)x11+2 [2,7,9,12] [2,7,9,13] 9x2+13-7 13x2+7-9 (9-7)x13-2 [2,7,10,10] (10-2)x(10-7) (10+7)x2-10 [2,7,10,11] 10x7/2-11 10x2+11-7 [2,7,10,12] 12x10/(7-2) 10/2+12+7 (7-10/2)x12 [2,7,10,13] [2,7,11,11] [2,7,11,12] (11-7-2)x12 (11-7)x12/2 12/2+11+7 (11+7)x2-12 [2,7,11,13] [2,7,12,12] (7x2-12)x12 (12+2)x12/7 [2,7,12,13] 12/(7-13/2) (13-7)x2+12 [2,7,13,13] [2,8,8,8] 8x8/2-8 (8+8)x2-8 (8/8+2)x8 [2,8,8,9] (9+2-8)x8 [2,8,8,10] 10+8+8-2 (8-10/2)x8 [2,8,8,11] (8/8+11)x2 [2,8,8,12] (8-2)x(12-8) 8/2+12+8 12x2+8-8 [2,8,8,13] (13-8-2)x8 (8x2-13)x8 (13-8/8)x2 [2,8,9,9] 9+9+8-2 (9/9+2)x8 [2,8,9,10] (10+2-9)x8 (9+8)x2-10 [2,8,9,11] 8/2+11+9 (11+9-8)x2 [2,8,9,12] 9x8/2-12 (9-8)x12x2 (9-12/2)x8 (8/12+2)x9 [2,8,9,13] (8-2)x(13-9) (13+8-9)x2 9/(2-13/8) [2,8,10,10] 8/2+10+10 (10+2)x(10-8) (10+10-8)x2 (10/10+2)x8 [2,8,10,11] (11+2-10)x8 (10-2)x(11-8) 10/2+11+8 11x2+10-8 (10-8)x11+2 [2,8,10,12] 10x2+12-8 12/2+10+8 (10+8)x2-12 [2,8,10,13] 13x2+8-10 (10-8)x13-2 [2,8,11,11] (11/11+2)x8 [2,8,11,12] (12+2-11)x8 [2,8,11,13] [2,8,12,12] (12-8-2)x12 12x12/(8-2) (12-8)x12/2 (8-12/2)x12 12/(2-12/8) (12/12+2)x8 [2,8,12,13] (13+2-12)x8 [2,8,13,13] (13/13+2)x8 [2,9,9,9] [2,9,9,10] [2,9,9,11] (9/9+11)x2 [2,9,9,12] 12x2+9-9 12/2+9+9 (9+9)x2-12 [2,9,9,13] (13-9/9)x2 [2,9,10,10] 10/2+10+9 [2,9,10,11] (10+2)x(11-9) (11+10-9)x2 [2,9,10,12] (10-2)x(12-9) (10-9)x12x2 [2,9,10,13] 10x2+13-9 (13+9-10)x2 [2,9,11,11] 11x2+11-9 (11-9)x11+2 [2,9,11,12] [2,9,11,13] 13x2+9-11 (11-9)x13-2 [2,9,12,12] [2,9,12,13] (13-9-2)x12 (13-9)x12/2 [2,9,13,13] (13+9)/2+13 [2,10,10,10] [2,10,10,11] (10/10+11)x2 [2,10,10,12] (10+2)x(12-10) 12x2+10-10 [2,10,10,13] (10-2)x(13-10) (13-10/10)x2 [2,10,11,11] (11+11-10)x2 [2,10,11,12] 11x2+12-10 (11-10)x12x2 (12-10)x11+2 [2,10,11,13] (10+2)x(13-11) (13+10-11)x2 [2,10,12,12] [2,10,12,13] 13x2+10-12 (12+10)/2+13 (12-10)x13-2 [2,10,13,13] [2,11,11,11] (11/11+11)x2 [2,11,11,12] 12x2+11-11 [2,11,11,13] 11x2+13-11 (11+11)/2+13 (13-11/11)x2 (13-11)x11+2 [2,11,12,12] (12-11)x12x2 (12/12+11)x2 [2,11,12,13] (13+11-12)x2 (13+11)/2+12 [2,11,13,13] 13x2+11-13 (13-11)x13-2 (13+13)/2+11 (13/13+11)x2 [2,12,12,12] 12x2+12-12 (12+12)/2+12 [2,12,12,13] (13-12)x12x2 (13-12/12)x2 [2,12,13,13] 12x2+13-13 [2,13,13,13] (13-13/13)x2 [3,3,3,3] 3x3x3-3 [3,3,3,4] (3x3-3)x4 (4+3)x3+3 [3,3,3,5] 5x3+3x3 [3,3,3,6] 6x3+3+3 (3+3)x3+6 (3/3+3)x6 (6+3)x3-3 [3,3,3,7] (3+3)x(7-3) (3/3+7)x3 [3,3,3,8] 8x3+3-3 [3,3,3,9] (9-3/3)x3 [3,3,3,10] 10x3-3-3 (10-3)x3+3 [3,3,3,11] 11x3-3x3 [3,3,3,12] (3+3)x12/3 3x3+12+3 (3-3/3)x12 (12-3)x3-3 [3,3,3,13] [3,3,4,4] 4x3+4x3 (4x3-4)x3 [3,3,4,5] (3/3+5)x4 (5-3)x4x3 (5+4)x3-3 [3,3,4,6] 6x4+3-3 [3,3,4,7] (7-3/3)x4 (7+4-3)x3 [3,3,4,8] (3+3)x(8-4) (4-3/3)x8 (4-3)x8x3 [3,3,4,9] 4x3+9+3 (9+3-4)x3 (9/3+3)x4 [3,3,4,10] [3,3,4,11] 3x3+11+4 (11-4)x3+3 [3,3,4,12] (3+3-4)x12 (12-3-3)x4 4x3x3-12 12x3-4x3 (12/3+4)x3 [3,3,4,13] (13-4)x3-3 [3,3,5,5] 5x5-3/3 [3,3,5,6] 6x5-3-3 (3+3)x5-6 (3x3-5)x6 (5-3/3)x6 (5+3)x(6-3) 5x3+6+3 (6+5-3)x3 [3,3,5,7] (5x3-7)x3 [3,3,5,8] [3,3,5,9] (3+3)x(9-5) (5+3)x9/3 (9+3)x(5-3) (9/3+5)x3 [3,3,5,10] 3x3+10+5 (10+3-5)x3 (3-3/5)x10 [3,3,5,11] [3,3,5,12] 5x3+12-3 (12-5)x3+3 [3,3,5,13] 13+5+3+3 13x3-5x3 [3,3,6,6] (6/3+6)x3 [3,3,6,7] 7x3+6-3 (6-3)x7+3 (7+3)x3-6 [3,3,6,8] (3x3-6)x8 (6+3)x8/3 [3,3,6,9] 3x3+9+6 6x3+9-3 9x3+3-6 (6-3)x9-3 (9+3)x6/3 (9-3)x3+6 [3,3,6,10] (3+3)x(10-6) (10-3-3)x6 (6x3-10)x3 (10-6/3)x3 [3,3,6,11] 11x3-6-3 (11+3-6)x3 (11-3)x(6-3) [3,3,6,12] 12+6+3+3 (3+3)x6-12 [3,3,6,13] (13-3x3)x6 (13-3)x3-6 (13-6)x3+3 [3,3,7,7] (3/7+3)x7 [3,3,7,8] 3x3+8+7 [3,3,7,9] 7x3+9/3 (9-3)x(7-3) 9x7/3+3 [3,3,7,10] [3,3,7,11] 11+7+3+3 (3+3)x(11-7) [3,3,7,12] (3x3-7)x12 (12+3-7)x3 (7-3)x3+12 [3,3,7,13] (7x3-13)x3 [3,3,8,8] 8/(3-8/3) [3,3,8,9] (9-3-3)x8 (8+3)x3-9 (8-3)x3+9 [3,3,8,10] 10+8+3+3 8/(10/3-3) [3,3,8,11] [3,3,8,12] (3+3)x(12-8) (8-3-3)x12 (12-3x3)x8 (12-3)x8/3 [3,3,8,13] (13+3-8)x3 [3,3,9,9] 9+9+3+3 9x3-9/3 (3-3/9)x9 9x9/3-3 [3,3,9,10] 10x3+3-9 [3,3,9,11] (11-3)x9/3 (11-9/3)x3 [3,3,9,12] 12x3-9-3 (9+3)x3-12 (9-3)x12/3 [3,3,9,13] (3+3)x(13-9) [3,3,10,10] [3,3,10,11] [3,3,10,12] [3,3,10,13] 3/3+13+10 [3,3,11,11] [3,3,11,12] (11-3x3)x12 3/3+12+11 11x3+3-12 [3,3,11,13] 13+11+3-3 [3,3,12,12] 12x12/(3+3) 12+12+3-3 (12-12/3)x3 [3,3,12,13] 13+12-3/3 13x3-12-3 [3,3,13,13] [3,4,4,4] (4+3)x4-4 [3,4,4,5] (5+4-3)x4 4x4+5+3 [3,4,4,6] (6-4)x4x3 (4x3-6)x4 (4-3)x6x4 (4+4)x(6-3) (6/3+4)x4 (4/4+3)x6 [3,4,4,7] (7+3-4)x4 (4/4+7)x3 [3,4,4,8] 4x3+8+4 8x3+4-4 (8-3)x4+4 (4x4-8)x3 [3,4,4,9] 9x4-4x3 (4-4/3)x9 (4+4)x9/3 (9-4/4)x3 [3,4,4,10] (10-3)x4-4 [3,4,4,11] 4x4+11-3 [3,4,4,12] (3-4/4)x12 (12/4+3)x4 [3,4,4,13] 13+4+4+3 (13-4-3)x4 [3,4,5,5] 5x5+3-4 5x3+5+4 [3,4,5,6] (5+3-4)x6 [3,4,5,7] 4x3+7+5 (7-5)x4x3 (5+3)x(7-4) 5x4+7-3 (7-3)x5+4 (7+5-4)x3 [3,4,5,8] 8x4-5-3 (5+3)x4-8 (8+3-5)x4 (8+4)x(5-3) (5-4)x8x3 (5+4)x8/3 [3,4,5,9] (5x3-9)x4 (9+4-5)x3 [3,4,5,10] 10x4x3/5 (5-3)x10+4 [3,4,5,11] (4+3)x5-11 11x3-5-4 [3,4,5,12] 12+5+4+3 (4+3-5)x12 (5+3)x12/4 12x4/(5-3) 12x5/3+4 5x4+12/3 (5x4-12)x3 (12/4+5)x3 [3,4,5,13] (13+5)x4/3 5x3+13-4 [3,4,6,6] 4x3+6+6 6x6-4x3 (6+4)x3-6 (6+6-4)x3 [3,4,6,7] [3,4,6,8] (8-6)x4x3 (4x3-8)x6 (8+4)x6/3 (8-6/3)x4 (8/4+6)x3 [3,4,6,9] (9+3-6)x4 (9+3)x(6-4) [3,4,6,10] 6x3+10-4 10x6/3+4 (10+4-6)x3 (10-4)x3+6 [3,4,6,11] 11+6+4+3 (11-4-3)x6 6/(3-11/4) [3,4,6,12] 12x4x3/6 (12+6)x4/3 (6+3)x4-12 (6x3-12)x4 (12-4)x(6-3) (6-3)x4+12 (4-6/3)x12 [3,4,6,13] (13+3)x6/4 6/(13/4-3) [3,4,7,7] 7x3+7-4 7x4+3-7 (7-3)x7-4 (7-4)x7+3 [3,4,7,8] (7-3)x4+8 [3,4,7,9] (9-7)x4x3 9x3+4-7 (7+4)x3-9 (7-4)x9-3 [3,4,7,10] 10+7+4+3 (10+3-7)x4 (10-4)x(7-3) [3,4,7,11] (11+7)x4/3 (11-3)x(7-4) (11+4-7)x3 [3,4,7,12] 7x3+12/4 12x7/3-4 7x4-12/3 12x7/4+3 [3,4,7,13] [3,4,8,8] [3,4,8,9] 9+8+4+3 (4x3-9)x8 (9+3)x8/4 (9-3)x(8-4) [3,4,8,10] (10-4-3)x8 (10-8)x4x3 (10+8)x4/3 (10-8/4)x3 [3,4,8,11] (11+3-8)x4 8x4+3-11 (11-3)x4-8 8/(4-11/3) [3,4,8,12] 12x4/3+8 12x4-8x3 12x3-8-4 (8+4)x3-12 (12+4-8)x3 (8-4)x3+12 [3,4,8,13] (13-4)x8/3 8/(13/3-4) [3,4,9,9] (9+9)x4/3 9x4-9-3 (9-9/3)x4 (9-4)x3+9 [3,4,9,10] [3,4,9,11] (11-9)x4x3 (11x9-3)/4 [3,4,9,12] (9-4-3)x12 9x4/3+12 9x3-12/4 (12+3-9)x4 (12-4)x9/3 12x9/4-3 (3-4/12)x9 [3,4,9,13] (13+4-9)x3 [3,4,10,10] 10x3+4-10 [3,4,10,11] [3,4,10,12] (12-10)x4x3 (4x3-10)x12 (10-4)x12/3 (10-12/3)x4 12/(3-10/4) [3,4,10,13] 13+10+4-3 (13+3-10)x4 10x4-13-3 [3,4,11,11] [3,4,11,12] 12+11+4-3 (11-3)x12/4 (11-12/4)x3 [3,4,11,13] (13-11)x4x3 (13+11)x(4-3) 11x3+4-13 13x3-11-4 [3,4,12,12] (12+12)x(4-3) (12-3)x4-12 [3,4,12,13] 13+12+3-4 [3,4,13,13] [3,5,5,5] [3,5,5,6] (5+5)x3-6 (5/5+3)x6 [3,5,5,7] (7+5)x(5-3) (5/5+7)x3 [3,5,5,8] (5+3)x(8-5) 8x3+5-5 [3,5,5,9] (9-5/5)x3 (9/5+3)x5 [3,5,5,10] [3,5,5,11] 11+5+5+3 [3,5,5,12] (3-5/5)x12 [3,5,5,13] [3,5,6,6] (6+3-5)x6 (6+6)x(5-3) [3,5,6,7] (7+5)x6/3 (7+6-5)x3 [3,5,6,8] 8x6/(5-3) (5-6/3)x8 (6-5)x8x3 [3,5,6,9] (5+3)x(9-6) (5-3)x9+6 (6-3)x5+9 6x5+3-9 (9-3)x5-6 (6+5)x3-9 (9+5-6)x3 [3,5,6,10] 10+6+5+3 (10/5+6)x3 [3,5,6,11] (5x3-11)x6 6x3+11-5 (11-5)x3+6 [3,5,6,12] (5+3-6)x12 (12-5-3)x6 (5-3)x6+12 [3,5,6,13] (13-5)x(6-3) [3,5,7,7] [3,5,7,8] 7x3+8-5 7x5-8-3 (8-5)x7+3 [3,5,7,9] 9+7+5+3 9x5-7x3 (5-7/3)x9 (9+3)x(7-5) [3,5,7,10] (5+3)x(10-7) (5-3)x7+10 (10+5-7)x3 [3,5,7,11] (11-5)x(7-3) (11x7-5)/3 [3,5,7,12] (7+3)x12/5 12x3-7-5 (7+5)x3-12 [3,5,7,13] (13x5+7)/3 [3,5,8,8] 8+8+5+3 (5-3)x8+8 [3,5,8,9] 9x3+5-8 (8-5)x9-3 [3,5,8,10] [3,5,8,11] (5+3)x(11-8) (11-5-3)x8 (11-3)x(8-5) (11+5-8)x3 [3,5,8,12] (5x3-12)x8 (12+3)x8/5 [3,5,8,13] 8x5-13-3 [3,5,9,9] 9x5/3+9 (9-3)x(9-5) [3,5,9,10] (9+3)x10/5 (10-5)x3+9 [3,5,9,11] [3,5,9,12] (5+3)x(12-9) (5-9/3)x12 (12+5-9)x3 (9-5)x3+12 [3,5,9,13] 13+9+5-3 (13-5)x9/3 (13x9+3)/5 [3,5,10,10] (10-10/5)x3 [3,5,10,11] 10x3+5-11 (10-3)x5-11 [3,5,10,12] (10-5-3)x12 12+10+5-3 [3,5,10,13] (5+3)x(13-10) 13x3-10-5 (13+5-10)x3 [3,5,11,11] 11+11+5-3 [3,5,11,12] (11-5)x12/3 [3,5,11,13] [3,5,12,12] 12x5-12x3 (12x5+12)/3 [3,5,12,13] (5x3-13)x12 (13-3)x12/5 [3,5,13,13] 13+13+3-5 [3,6,6,6] (6-3)x6+6 (6+6)x6/3 (6-6/3)x6 (6/6+3)x6 [3,6,6,7] 7x6-6x3 (7+3-6)x6 (6/6+7)x3 [3,6,6,8] 8x3+6-6 (8-3)x6-6 [3,6,6,9] 9+6+6+3 9x6/3+6 6x6-9-3 (9-6/6)x3 [3,6,6,10] (6-3)x10-6 [3,6,6,11] (11x6+6)/3 [3,6,6,12] 6x3+12-6 12x6/(6-3) 6x6/3+12 12x3-6-6 (6+6)x3-12 (3-6/6)x12 (12-6)x3+6 (12/6+6)x3 [3,6,6,13] (13-6-3)x6 (13x6-6)/3 [3,6,7,7] (7+7-6)x3 (7/7+3)x6 [3,6,7,8] 8+7+6+3 (8+3-7)x6 (7-6)x8x3 [3,6,7,9] 7x3+9-6 (7-9/3)x6 (9+6-7)x3 (9-6)x7+3 [3,6,7,10] 7x6/3+10 [3,6,7,11] [3,6,7,12] (6+3-7)x12 (12-6)x(7-3) [3,6,7,13] 6x3+13-7 (13-7)x3+6 [3,6,8,8] 8x6/3+8 8x6-8x3 (8/8+3)x6 [3,6,8,9] 9x8/(6-3) (9+3-8)x6 (9+3)x(8-6) (6-9/3)x8 [3,6,8,10] (10+6-8)x3 [3,6,8,11] [3,6,8,12] (12-6-3)x8 (8-12/3)x6 [3,6,8,13] 13+8+6-3 [3,6,9,9] 9x3+6-9 (9-6)x9-3 (9/9+3)x6 [3,6,9,10] (10+3-9)x6 (9-3)x(10-6) 10x9/3-6 9x6-10x3 (6-10/3)x9 [3,6,9,11] (6-3)x11-9 (11-3)x(9-6) (11+6-9)x3 (11-6)x3+9 [3,6,9,12] 12x6x3/9 12+9+6-3 (9+3)x12/6 (9-3)x6-12 [3,6,9,13] 6/3+13+9 (13+3)x9/6 13x3-9-6 [3,6,10,10] (3-6/10)x10 (10/10+3)x6 [3,6,10,11] 11+10+6-3 (11+3-10)x6 [3,6,10,12] 6/3+12+10 10x3+6-12 10x6-12x3 (10x6+12)/3 (12+6-10)x3 (10-6)x3+12 (10-12/6)x3 [3,6,10,13] [3,6,11,11] 6/3+11+11 (11/11+3)x6 [3,6,11,12] (11-6-3)x12 (12+3-11)x6 [3,6,11,13] (13+6-11)x3 [3,6,12,12] (6-3)x12-12 (12-6)x12/3 (6-12/3)x12 (12/12+3)x6 [3,6,12,13] (13+3-12)x6 [3,6,13,13] 13+13-6/3 (13/13+3)x6 [3,7,7,7] 7+7+7+3 (7/7+7)x3 [3,7,7,8] 8x3+7-7 [3,7,7,9] (9-7/7)x3 [3,7,7,10] 7x3+10-7 (10-7)x7+3 [3,7,7,11] [3,7,7,12] (3-7/7)x12 [3,7,7,13] 13+7+7-3 (13-7)x(7-3) [3,7,8,8] (7-3)x8-8 (8-7)x8x3 (8/8+7)x3 [3,7,8,9] (9+7-8)x3 [3,7,8,10] [3,7,8,11] 7x3+11-8 (8-3)x7-11 (11-8)x7+3 [3,7,8,12] (7+3-8)x12 12+8+7-3 12x8/(7-3) (7-12/3)x8 [3,7,8,13] (13-7-3)x8 13x3-8-7 [3,7,9,9] (9+3)x(9-7) (9x7+9)/3 (9/9+7)x3 [3,7,9,10] 9x3+7-10 (10+7-9)x3 (10-7)x9-3 [3,7,9,11] 11+9+7-3 (9-3)x(11-7) [3,7,9,12] 7x3+12-9 (7-3)x9-12 (12-7)x3+9 (12-9)x7+3 [3,7,9,13] 9x7-13x3 (7-13/3)x9 [3,7,10,10] 10+10+7-3 (10/10+7)x3 [3,7,10,11] (11-3)x(10-7) (11+7-10)x3 [3,7,10,12] [3,7,10,13] 7x3+13-10 10x3+7-13 (13-10)x7+3 [3,7,11,11] (11/11+7)x3 [3,7,11,12] (11+3)x12/7 (12+7-11)x3 (11-7)x3+12 [3,7,11,13] [3,7,12,12] (12-7-3)x12 (12x7-12)/3 (12/12+7)x3 [3,7,12,13] (13-7)x12/3 12/3+13+7 (13+7-12)x3 [3,7,13,13] (13/13+7)x3 [3,8,8,8] 8x3+8-8 (8x8+8)/3 [3,8,8,9] (9-8)x8x3 (9-8/8)x3 [3,8,8,10] (10x8-8)/3 [3,8,8,11] 11+8+8-3 [3,8,8,12] 12x8/3-8 (3-8/8)x12 [3,8,8,13] [3,8,9,9] 8x3+9-9 [3,8,9,10] (10-9)x8x3 10+9+8-3 (9+3)x(10-8) [3,8,9,11] 9x3+8-11 (11-8)x9-3 [3,8,9,12] (8+3-9)x12 (9-3)x(12-8) [3,8,9,13] 9/3+13+8 (13-8)x3+9 [3,8,10,10] 8x3+10-10 [3,8,10,11] (11-10)x8x3 [3,8,10,12] 12x10/(8-3) [3,8,10,13] [3,8,11,11] 8x3+11-11 (11-3)x(11-8) [3,8,11,12] (12-11)x8x3 [3,8,11,13] [3,8,12,12] 8x3+12-12 12/3+12+8 (12-8)x3+12 [3,8,12,13] (13-8-3)x12 (13-12)x8x3 (13+3)x12/8 [3,8,13,13] 8x3+13-13 [3,9,9,9] 9+9+9-3 (9x9-9)/3 (9-9/9)x3 [3,9,9,10] (9+9-10)x3 [3,9,9,11] (9+3)x(11-9) 11x9/3-9 [3,9,9,12] 9x3+9-12 9/3+12+9 (3-9/9)x12 (12-9)x9-3 [3,9,9,13] (9-3)x(13-9) [3,9,10,10] (9-10/10)x3 [3,9,10,11] 9/3+11+10 (10+9-11)x3 [3,9,10,12] (9+3)x(12-10) (9+3-10)x12 [3,9,10,13] 9x3+10-13 (13-10)x9-3 [3,9,11,11] (3-9/11)x11 (9-11/11)x3 [3,9,11,12] (11-3)x(12-9) 12/3+11+9 (11+9-12)x3 [3,9,11,13] (9+3)x(13-11) [3,9,12,12] 12x12/(9-3) 12x9/3-12 (9-12/12)x3 [3,9,12,13] (12+9-13)x3 (13-9)x3+12 [3,9,13,13] (9-13/13)x3 [3,10,10,10] [3,10,10,11] [3,10,10,12] 12/3+10+10 (10+10-12)x3 (3-10/10)x12 [3,10,10,13] [3,10,11,11] [3,10,11,12] (10+3-11)x12 [3,10,11,13] (11-3)x(13-10) (11+10-13)x3 [3,10,12,12] [3,10,12,13] [3,10,13,13] [3,11,11,11] [3,11,11,12] (3-11/11)x12 [3,11,11,13] [3,11,12,12] (11+3-12)x12 [3,11,12,13] [3,11,13,13] [3,12,12,12] (3-12/12)x12 [3,12,12,13] (12+3-13)x12 [3,12,13,13] (3-13/13)x12 [3,13,13,13] [4,4,4,4] 4x4+4+4 [4,4,4,5] (4/4+5)x4 [4,4,4,6] 6x4+4-4 [4,4,4,7] (4+4)x(7-4) (7-4/4)x4 [4,4,4,8] 8x4-4-4 (4+4)x4-8 (4-4/4)x8 (8/4+4)x4 [4,4,4,9] (9-4)x4+4 [4,4,4,10] 10x4-4x4 (4x4-10)x4 [4,4,4,11] (11-4)x4-4 [4,4,4,12] 12+4+4+4 (4+4)x12/4 4x4+12-4 [4,4,4,13] [4,4,5,5] 5x5-4/4 (5+5-4)x4 (4/5+4)x5 [4,4,5,6] (5-4/4)x6 (5-4)x6x4 [4,4,5,7] (7+4-5)x4 [4,4,5,8] (4+4)x(8-5) (4+4-5)x8 8x5-4x4 5x4+8-4 (8-4)x5+4 [4,4,5,9] [4,4,5,10] (10-5)x4+4 (10/5+4)x4 [4,4,5,11] 11+5+4+4 11x4-5x4 [4,4,5,12] (5+4)x4-12 (12-5)x4-4 [4,4,5,13] 4x4+13-5 [4,4,6,6] [4,4,6,7] [4,4,6,8] (8+4-6)x4 (8+4)x(6-4) [4,4,6,9] (4+4)x(9-6) 9x4x4/6 [4,4,6,10] 10+6+4+4 (6-4)x10+4 [4,4,6,11] (11-6)x4+4 [4,4,6,12] (4+4-6)x12 (12-4-4)x6 (4x4-12)x6 12x4-6x4 12x4/(6-4) (12+4)x6/4 (12/6+4)x4 [4,4,6,13] (13-6)x4-4 [4,4,7,7] (4-4/7)x7 [4,4,7,8] 7x4+4-8 (8-4)x7-4 [4,4,7,9] 9+7+4+4 (9+4-7)x4 [4,4,7,10] (4+4)x(10-7) [4,4,7,11] [4,4,7,12] (12-4)x(7-4) (7-4)x4+12 (12-7)x4+4 [4,4,7,13] 13x4-7x4 [4,4,8,8] 8+8+4+4 (8+4)x8/4 (8-4)x4+8 (8-8/4)x4 [4,4,8,9] 9x4-8-4 [4,4,8,10] (10+4-8)x4 (10-4)x(8-4) 10x8/4+4 [4,4,8,11] (4+4)x(11-8) (11-4-4)x8 [4,4,8,12] 12x4x4/8 8x4+4-12 (4-8/4)x12 (12-4)x4-8 [4,4,8,13] (4x4-13)x8 (13-8)x4+4 [4,4,9,9] [4,4,9,10] [4,4,9,11] (11+4-9)x4 [4,4,9,12] (4+4)x(12-9) (9-12/4)x4 [4,4,9,13] [4,4,10,10] (10x10-4)/4 [4,4,10,11] [4,4,10,12] (10-4-4)x12 10x4-12-4 (12+4-10)x4 [4,4,10,13] (4+4)x(13-10) 4/4+13+10 [4,4,11,11] [4,4,11,12] 4/4+12+11 [4,4,11,13] 13+11+4-4 (13+4-11)x4 [4,4,12,12] 12+12+4-4 (12-4)x12/4 [4,4,12,13] 13+12-4/4 (13-4)x4-12 [4,4,13,13] [4,5,5,5] 5x5+4-5 (5/5+5)x4 [4,5,5,6] 6x4+5-5 [4,5,5,7] (7-5/5)x4 [4,5,5,8] (4-5/5)x8 [4,5,5,9] 5x4+9-5 (9-5)x5+4 [4,5,5,10] 10+5+5+4 [4,5,5,11] [4,5,5,12] [4,5,5,13] [4,5,6,6] (6-5)x6x4 (6/6+5)x4 [4,5,6,7] (7+5)x(6-4) (7+5-6)x4 [4,5,6,8] (5+4-6)x8 [4,5,6,9] 9+6+5+4 [4,5,6,10] 5x4+10-6 6x5+4-10 (10-4)x5-6 (10-6)x5+4 [4,5,6,11] (11+5)x6/4 [4,5,6,12] (6+4)x12/5 [4,5,6,13] (13-5-4)x6 [4,5,7,7] 7x5-7-4 (7/7+5)x4 [4,5,7,8] 8+7+5+4 (8+4)x(7-5) (7+5)x8/4 (8+5-7)x4 [4,5,7,9] 7x4+5-9 (7-4)x5+9 9x4-7-5 (9-5)x7-4 [4,5,7,10] (7-5)x10+4 [4,5,7,11] 5x4+11-7 (11-7)x5+4 [4,5,7,12] (5+4-7)x12 12x4/(7-5) [4,5,7,13] (13-5)x(7-4) (13x7+5)/4 [4,5,8,8] (5-8/4)x8 (8/8+5)x4 [4,5,8,9] (9+5-8)x4 (9-5)x4+8 [4,5,8,10] (8+4)x10/5 (4-8/5)x10 (8-10/5)x4 (8/10+4)x5 [4,5,8,11] (11-5)x(8-4) (11+4)x8/5 [4,5,8,12] (12-5-4)x8 5x4+12-8 8x5-12-4 (12-4)x(8-5) (8-5)x4+12 (12-8)x5+4 [4,5,8,13] 8x4+5-13 (13-5)x4-8 [4,5,9,9] (9/9+5)x4 [4,5,9,10] (10-4)x(9-5) (10+5-9)x4 [4,5,9,11] [4,5,9,12] 12x5/4+9 12x5-9x4 [4,5,9,13] 5x4+13-9 (13-9)x5+4 [4,5,10,10] 10x10/5+4 (10/10+5)x4 [4,5,10,11] 10x4-11-5 (11+5-10)x4 [4,5,10,12] 12x5x4/10 (4-10/5)x12 [4,5,10,13] 13+10+5-4 [4,5,11,11] (11-4)x5-11 (11/11+5)x4 [4,5,11,12] (11-5-4)x12 12+11+5-4 (12+5-11)x4 [4,5,11,13] (13+11)x(5-4) [4,5,12,12] (12+12)x(5-4) (5-12/4)x12 (12/12+5)x4 [4,5,12,13] 13+12+4-5 (13-5)x12/4 (13+5-12)x4 [4,5,13,13] (13/13+5)x4 [4,6,6,6] 6x4+6-6 (6+6)x(6-4) [4,6,6,7] (7-6)x6x4 (7-4)x6+6 (7-6/6)x4 [4,6,6,8] 8+6+6+4 8x6-6x4 8x6/(6-4) 6x6-8-4 (6+6)x8/4 (6-8/4)x6 (4-6/6)x8 [4,6,6,9] (6-4)x9+6 9x4-6-6 (9-4)x6-6 [4,6,6,10] (10+6)x6/4 [4,6,6,11] [4,6,6,12] (6-4)x6+12 12x6/4+6 [4,6,6,13] [4,6,7,7] 7+7+6+4 6x4+7-7 [4,6,7,8] (6+4-7)x8 (8-7)x6x4 [4,6,7,9] (9+7)x6/4 [4,6,7,10] (6-4)x7+10 7x4+6-10 (7-4)x10-6 (10-6)x7-4 [4,6,7,11] [4,6,7,12] 12x6/(7-4) (7-12/4)x6 [4,6,7,13] [4,6,8,8] 6x4+8-8 (6-4)x8+8 (8+8)x6/4 (8+4)x(8-6) [4,6,8,9] (9-8)x6x4 9x8/4+6 (4-8/6)x9 [4,6,8,10] (8-6)x10+4 (10-6)x4+8 [4,6,8,11] [4,6,8,12] (6+4-8)x12 8x6/4+12 (8+4)x12/6 (12-6)x(8-4) 12x4/(8-6) (6-12/4)x8 (8-12/6)x4 [4,6,8,13] (13-6-4)x8 [4,6,9,9] 6x4+9-9 [4,6,9,10] (10-9)x6x4 10x6/4+9 10x6-9x4 (10x9+6)/4 [4,6,9,11] [4,6,9,12] (12+4)x9/6 (12-4)x(9-6) (9-6)x4+12 [4,6,9,13] 13+9+6-4 [4,6,10,10] 6x4+10-10 10x4-10-6 (10-4)x(10-6) [4,6,10,11] (11-10)x6x4 [4,6,10,12] 12+10+6-4 (10-4)x6-12 12x10/4-6 12x10/6+4 [4,6,10,13] [4,6,11,11] 6x4+11-11 11+11+6-4 [4,6,11,12] (12-11)x6x4 [4,6,11,13] [4,6,12,12] (12-6-4)x12 6x4+12-12 12x6-12x4 (4-12/6)x12 [4,6,12,13] (13-12)x6x4 [4,6,13,13] 6x4+13-13 13+13+4-6 [4,7,7,7] (7-7/7)x4 [4,7,7,8] (7+7-8)x4 (4-7/7)x8 [4,7,7,9] [4,7,7,10] [4,7,7,11] 7x4+7-11 (11-7)x7-4 [4,7,7,12] [4,7,7,13] [4,7,8,8] (7+4-8)x8 8x7-8x4 (7-8/8)x4 [4,7,8,9] 9x8/(7-4) (8+4)x(9-7) (8+7-9)x4 [4,7,8,10] 8x7/4+10 [4,7,8,11] (11-7)x4+8 [4,7,8,12] 7x4+8-12 (12-8)x7-4 [4,7,8,13] 13+8+7-4 (13-7)x(8-4) [4,7,9,9] (7-9/9)x4 [4,7,9,10] 10x4-9-7 (9+7-10)x4 (9-7)x10+4 [4,7,9,11] (7-4)x11-9 (9-4)x7-11 [4,7,9,12] (7+4-9)x12 12+9+7-4 12x4/(9-7) [4,7,9,13] 7x4+9-13 (13-9)x7-4 [4,7,10,10] (7-10/10)x4 [4,7,10,11] 11+10+7-4 (10-4)x(11-7) (10+7-11)x4 [4,7,10,12] (10+4)x12/7 (12-4)x(10-7) (10-7)x4+12 [4,7,10,13] [4,7,11,11] (7-11/11)x4 [4,7,11,12] (11+7-12)x4 [4,7,11,13] 11x4-13-7 [4,7,12,12] (7-4)x12-12 (12x7+12)/4 (7-12/12)x4 [4,7,12,13] (13-7-4)x12 (12+7-13)x4 [4,7,13,13] (7-13/13)x4 [4,8,8,8] (8-4)x8-8 8x8/4+8 (4-8/8)x8 [4,8,8,9] (8+4-9)x8 [4,8,8,10] (8+4)x(10-8) 10x4-8-8 8x8-10x4 (8+8-10)x4 [4,8,8,11] (11x8+8)/4 [4,8,8,12] 12+8+8-4 12x8/(8-4) (12-8)x4+8 [4,8,8,13] (13x8-8)/4 [4,8,9,9] (4-9/9)x8 [4,8,9,10] (9+4-10)x8 [4,8,9,11] (8+4)x(11-9) 11+9+8-4 (9+8-11)x4 [4,8,9,12] 9x8x4/12 (8-4)x9-12 9x8-12x4 [4,8,9,13] 8/4+13+9 (13-9)x4+8 [4,8,10,10] 10+10+8-4 (10-8)x10+4 (4-10/10)x8 [4,8,10,11] (10+4-11)x8 [4,8,10,12] (8+4)x(12-10) (8+4-10)x12 8/4+12+10 (10-4)x(12-8) 12x4/(10-8) (10+8-12)x4 [4,8,10,13] [4,8,11,11] 8/4+11+11 (4-11/11)x8 [4,8,11,12] (11+4-12)x8 11x4-12-8 (12-4)x(11-8) (11-8)x4+12 [4,8,11,13] (8+4)x(13-11) (11+8-13)x4 [4,8,12,12] (12+4)x12/8 (4-12/12)x8 [4,8,12,13] (12+4-13)x8 12/4+13+8 [4,8,13,13] 13+13-8/4 (4-13/13)x8 [4,9,9,9] [4,9,9,10] 10+9+9-4 [4,9,9,11] [4,9,9,12] (9+9-12)x4 (4-12/9)x9 [4,9,9,13] [4,9,10,10] [4,9,10,11] (11-9)x10+4 [4,9,10,12] 12x10/(9-4) [4,9,10,13] (10-4)x(13-9) (10+9-13)x4 [4,9,11,11] 11x4-11-9 [4,9,11,12] (9+4-11)x12 12x11/4-9 12x4/(11-9) [4,9,11,13] [4,9,12,12] (12-4)x(12-9) 12/4+12+9 (12x9-12)/4 (12-9)x4+12 [4,9,12,13] [4,9,13,13] [4,10,10,10] [4,10,10,11] 11x4-10-10 [4,10,10,12] (12-10)x10+4 [4,10,10,13] [4,10,11,11] [4,10,11,12] 12/4+11+10 [4,10,11,13] (13-11)x10+4 [4,10,12,12] (10+4-12)x12 12x12/(10-4) 12x4/(12-10) [4,10,12,13] (12-4)x(13-10) (13-10)x4+12 [4,10,13,13] [4,11,11,11] [4,11,11,12] [4,11,11,13] [4,11,12,12] [4,11,12,13] (11+4-13)x12 12x4-13-11 12x4/(13-11) [4,11,13,13] [4,12,12,12] 12x4-12-12 12x12/4-12 [4,12,12,13] [4,12,13,13] [4,13,13,13] [5,5,5,5] 5x5-5/5 [5,5,5,6] 5x5+5-6 (5-5/5)x6 [5,5,5,7] [5,5,5,8] [5,5,5,9] 9+5+5+5 [5,5,5,10] [5,5,5,11] [5,5,5,12] (5+5)x12/5 [5,5,5,13] [5,5,6,6] (5+5-6)x6 5x5-6/6 (6-6/5)x5 [5,5,6,7] 5x5+6-7 7x5-6-5 [5,5,6,8] 8+6+5+5 [5,5,6,9] [5,5,6,10] [5,5,6,11] 6x5+5-11 (11-5)x5-6 [5,5,6,12] [5,5,6,13] [5,5,7,7] 7+7+5+5 7x7-5x5 5x5-7/7 (7+5)x(7-5) [5,5,7,8] (5+5-7)x8 5x5+7-8 [5,5,7,9] [5,5,7,10] (7+5)x10/5 [5,5,7,11] (7-11/5)x5 [5,5,7,12] [5,5,7,13] [5,5,8,8] 5x5-8/8 [5,5,8,9] 5x5+8-9 (8-5)x5+9 [5,5,8,10] (10+5)x8/5 (5-10/5)x8 [5,5,8,11] 8x5-11-5 [5,5,8,12] (5+5-8)x12 [5,5,8,13] (13-5-5)x8 (13-5)x(8-5) [5,5,9,9] 5x5-9/9 [5,5,9,10] 5x5+9-10 [5,5,9,11] (11-5)x(9-5) [5,5,9,12] [5,5,9,13] [5,5,10,10] 5x5-10/10 [5,5,10,11] 5x5+10-11 [5,5,10,12] [5,5,10,13] 5/5+13+10 (5-13/5)x10 [5,5,11,11] 5x5-11/11 [5,5,11,12] 5x5+11-12 5/5+12+11 (12-5)x5-11 [5,5,11,13] 13+11+5-5 [5,5,12,12] (12-5-5)x12 5x5-12/12 12+12+5-5 [5,5,12,13] 5x5+12-13 13+12-5/5 [5,5,13,13] 5x5-13/13 [5,6,6,6] (5-6/6)x6 [5,6,6,7] 7+6+6+5 (6+5-7)x6 6x6-7-5 (6+6)x(7-5) [5,6,6,8] (8-5)x6+6 [5,6,6,9] 9x6-6x5 [5,6,6,10] (10-5)x6-6 (6+6)x10/5 (6-10/5)x6 [5,6,6,11] [5,6,6,12] 6x5+6-12 12x5-6x6 (12-6)x5-6 [5,6,6,13] [5,6,7,7] (5-7/7)x6 [5,6,7,8] (7+5)x(8-6) (7+5-8)x6 8x6/(7-5) [5,6,7,9] (7-5)x9+6 [5,6,7,10] [5,6,7,11] [5,6,7,12] (7+5)x12/6 (7-5)x6+12 [5,6,7,13] 6x5+7-13 (13+7)x6/5 7x6-13-5 (13-7)x5-6 [5,6,8,8] (6+5-8)x8 (5-8/8)x6 [5,6,8,9] (8+5-9)x6 (9+6)x8/5 [5,6,8,10] 8x6x5/10 8x5-10-6 (8-5)x10-6 [5,6,8,11] [5,6,8,12] (12+8)x6/5 12x6/(8-5) (5-12/6)x8 [5,6,8,13] (13+5)x8/6 [5,6,9,9] (9-6)x5+9 (5-9/9)x6 [5,6,9,10] (9+5-10)x6 10x9/5+6 [5,6,9,11] (11+9)x6/5 (11+5)x9/6 [5,6,9,12] (6+5-9)x12 (12-6)x(9-5) [5,6,9,13] (13-5)x(9-6) [5,6,10,10] (10+10)x6/5 (5-10/10)x6 [5,6,10,11] (10+5-11)x6 (11-5)x(10-6) [5,6,10,12] 10x6/5+12 (6-12/10)x5 [5,6,10,13] 13+10+6-5 [5,6,11,11] (5-11/11)x6 [5,6,11,12] 12+11+6-5 (11+5-12)x6 (11-5)x6-12 [5,6,11,13] (13+11)x(6-5) (13-6)x5-11 [5,6,12,12] (12+12)x(6-5) (5-12/12)x6 [5,6,12,13] (13-6-5)x12 13+12+5-6 (12+5-13)x6 [5,6,13,13] (5-13/13)x6 [5,7,7,7] [5,7,7,8] [5,7,7,9] (7+5)x(9-7) [5,7,7,10] (7-5)x7+10 [5,7,7,11] (5-11/7)x7 [5,7,7,12] [5,7,7,13] [5,7,8,8] (7-5)x8+8 (8+7)x8/5 [5,7,8,9] (7+5-9)x8 8x5-9-7 [5,7,8,10] (7+5)x(10-8) [5,7,8,11] [5,7,8,12] [5,7,8,13] [5,7,9,9] [5,7,9,10] (10-7)x5+9 [5,7,9,11] (7+5)x(11-9) [5,7,9,12] (9+5)x12/7 [5,7,9,13] 13+9+7-5 (13-7)x(9-5) [5,7,10,10] 10x7/5+10 [5,7,10,11] (10-5)x7-11 [5,7,10,12] (7+5)x(12-10) (7+5-10)x12 12+10+7-5 [5,7,10,13] (13-5)x(10-7) [5,7,11,11] 11+11+7-5 (11-5)x(11-7) [5,7,11,12] [5,7,11,13] (7+5)x(13-11) [5,7,12,12] 12x7-12x5 [5,7,12,13] [5,7,13,13] 13+13+5-7 [5,8,8,8] 8x5-8-8 8x8-8x5 [5,8,8,9] 9x8/(8-5) (9-5)x8-8 [5,8,8,10] (8+5-10)x8 10x8/5+8 [5,8,8,11] [5,8,8,12] [5,8,8,13] 13+8+8-5 [5,8,9,9] [5,8,9,10] [5,8,9,11] (8-5)x11-9 (9+5-11)x8 (11-8)x5+9 [5,8,9,12] 12+9+8-5 12x8/(9-5) [5,8,9,13] 9x5-13-8 [5,8,10,10] [5,8,10,11] 11+10+8-5 [5,8,10,12] (10+5-12)x8 [5,8,10,13] [5,8,11,11] [5,8,11,12] (8+5-11)x12 (11+5)x12/8 (11-5)x(12-8) [5,8,11,13] (11+5-13)x8 (13-5)x(11-8) [5,8,12,12] (8-5)x12-12 [5,8,12,13] [5,8,13,13] [5,9,9,9] [5,9,9,10] [5,9,9,11] 11+9+9-5 [5,9,9,12] 9x5-12-9 (9-5)x9-12 (12-9)x5+9 [5,9,9,13] [5,9,10,10] 10+10+9-5 [5,9,10,11] 9x5-11-10 [5,9,10,12] [5,9,10,13] 10/5+13+9 (13-10)x5+9 [5,9,11,11] [5,9,11,12] [5,9,11,13] (11-5)x(13-9) [5,9,12,12] (9+5-12)x12 (12x9+12)/5 [5,9,12,13] (13+5)x12/9 (13-5)x(12-9) [5,9,13,13] [5,10,10,10] [5,10,10,11] (11x10+10)/5 [5,10,10,12] 12x10/(10-5) 10/5+12+10 [5,10,10,13] (13x10-10)/5 [5,10,11,11] 10/5+11+11 [5,10,11,12] [5,10,11,13] [5,10,12,12] [5,10,12,13] (10+5-13)x12 [5,10,13,13] 10x5-13-13 13+13-10/5 (13-5)x(13-10) [5,11,11,11] [5,11,11,12] [5,11,11,13] [5,11,12,12] 12x12/(11-5) (12x11-12)/5 [5,11,12,13] [5,11,13,13] [5,12,12,12] [5,12,12,13] [5,12,13,13] [5,13,13,13] [6,6,6,6] 6+6+6+6 6x6-6-6 [6,6,6,7] [6,6,6,8] (6+6)x(8-6) (6+6-8)x6 [6,6,6,9] 6x6x6/9 (9-6)x6+6 [6,6,6,10] 10x6-6x6 [6,6,6,11] (11-6)x6-6 [6,6,6,12] (6+6)x12/6 (6-12/6)x6 [6,6,6,13] [6,6,7,7] [6,6,7,8] [6,6,7,9] (6+6)x(9-7) (7+6-9)x6 [6,6,7,10] (10-7)x6+6 [6,6,7,11] 11x6-7x6 [6,6,7,12] 7x6-12-6 (12-7)x6-6 [6,6,7,13] [6,6,8,8] 8x6/(8-6) [6,6,8,9] (6+6-9)x8 (8-6)x9+6 [6,6,8,10] (6+6)x(10-8) (8+6-10)x6 [6,6,8,11] (11-8)x6+6 [6,6,8,12] 8x6x6/12 12x6-8x6 (8-6)x6+12 (12+6)x8/6 [6,6,8,13] (13-8)x6-6 [6,6,9,9] [6,6,9,10] (9-6)x10-6 (10+6)x9/6 [6,6,9,11] (6+6)x(11-9) (9+6-11)x6 [6,6,9,12] 12x6/(9-6) 12x9/6+6 (12-9)x6+6 [6,6,9,13] 13x6-9x6 [6,6,10,10] [6,6,10,11] [6,6,10,12] (6+6)x(12-10) (6+6-10)x12 (10+6-12)x6 (12-6)x(10-6) [6,6,10,13] 6/6+13+10 (13-10)x6+6 [6,6,11,11] [6,6,11,12] 6/6+12+11 [6,6,11,13] (6+6)x(13-11) 13+11+6-6 (11+6-13)x6 [6,6,12,12] 12+12+6-6 (12-6)x6-12 [6,6,12,13] 13+12-6/6 [6,6,13,13] [6,7,7,7] [6,7,7,8] [6,7,7,9] [6,7,7,10] (7+7-10)x6 [6,7,7,11] 7x6-11-7 [6,7,7,12] [6,7,7,13] [6,7,8,8] [6,7,8,9] 8x6/(9-7) [6,7,8,10] (7+6-10)x8 7x6-10-8 (8-6)x7+10 [6,7,8,11] (11+7)x8/6 (8+7-11)x6 [6,7,8,12] (8+6)x12/7 [6,7,8,13] [6,7,9,9] 7x6-9-9 (9+7)x9/6 (9-7)x9+6 [6,7,9,10] [6,7,9,11] [6,7,9,12] (9+7-12)x6 (9-7)x6+12 [6,7,9,13] [6,7,10,10] (10-7)x10-6 [6,7,10,11] [6,7,10,12] 12x7/6+10 12x7-10x6 12x6/(10-7) [6,7,10,13] 13+10+7-6 (13-7)x(10-6) (10+7-13)x6 [6,7,11,11] (11-6)x7-11 [6,7,11,12] (7+6-11)x12 12+11+7-6 (12-6)x(11-7) [6,7,11,13] (13+11)x(7-6) [6,7,12,12] (12+12)x(7-6) [6,7,12,13] 13+12+6-7 (13-7)x6-12 [6,7,13,13] [6,8,8,8] (8-6)x8+8 [6,8,8,9] 9x8-8x6 (8+8)x9/6 [6,8,8,10] 8x6/(10-8) (10+8)x8/6 (10-6)x8-8 [6,8,8,11] (8+6-11)x8 [6,8,8,12] 12x8/6+8 (8+8-12)x6 [6,8,8,13] [6,8,9,9] (9+9)x8/6 9x8/(9-6) [6,8,9,10] (10-8)x9+6 [6,8,9,11] 8x6/(11-9) [6,8,9,12] 9x8/6+12 (9+6-12)x8 [6,8,9,13] 13+9+8-6 (9+8-13)x6 [6,8,10,10] [6,8,10,11] (11-8)x10-6 [6,8,10,12] 8x6/(12-10) 12+10+8-6 (10+6)x12/8 12x8/(10-6) (10-8)x6+12 [6,8,10,13] (10+6-13)x8 [6,8,11,11] 11+11+8-6 [6,8,11,12] 12x6/(11-8) [6,8,11,13] 8x6-13-11 8x6/(13-11) [6,8,12,12] (8+6-12)x12 8x6-12-12 12x8-12x6 (12-6)x(12-8) 12x12/8+6 [6,8,12,13] [6,8,13,13] 13+13+6-8 [6,9,9,9] [6,9,9,10] 10x9/6+9 [6,9,9,11] (9-6)x11-9 (11-9)x9+6 [6,9,9,12] 12+9+9-6 [6,9,9,13] [6,9,10,10] [6,9,10,11] 11+10+9-6 10x9-11x6 [6,9,10,12] (10-6)x9-12 (12-9)x10-6 (12-10)x9+6 [6,9,10,13] [6,9,11,11] [6,9,11,12] (11-9)x6+12 [6,9,11,13] (13-11)x9+6 [6,9,12,12] (9-6)x12-12 (12+6)x12/9 12x6/(12-9) [6,9,12,13] (9+6-13)x12 (12-6)x(13-9) 12/6+13+9 [6,9,13,13] [6,10,10,10] 10+10+10-6 [6,10,10,11] [6,10,10,12] [6,10,10,13] (13-10)x10-6 [6,10,11,11] [6,10,11,12] 12x10/(11-6) [6,10,11,13] [6,10,12,12] 12/6+12+10 (12-10)x6+12 [6,10,12,13] 12x6/(13-10) [6,10,13,13] [6,11,11,11] [6,11,11,12] 12/6+11+11 [6,11,11,13] [6,11,12,12] (12x11+12)/6 [6,11,12,13] (13-11)x6+12 [6,11,13,13] [6,12,12,12] 12x12/(12-6) [6,12,12,13] (13x12-12)/6 [6,12,13,13] 13+13-12/6 [6,13,13,13] [7,7,7,7] [7,7,7,8] [7,7,7,9] [7,7,7,10] [7,7,7,11] [7,7,7,12] (7+7)x12/7 [7,7,7,13] [7,7,8,8] [7,7,8,9] [7,7,8,10] [7,7,8,11] (7+7-11)x8 [7,7,8,12] [7,7,8,13] [7,7,9,9] [7,7,9,10] (9-7)x7+10 [7,7,9,11] [7,7,9,12] [7,7,9,13] [7,7,10,10] [7,7,10,11] [7,7,10,12] [7,7,10,13] 7/7+13+10 [7,7,11,11] [7,7,11,12] 7/7+12+11 (12-7)x7-11 [7,7,11,13] 13+11+7-7 (13-7)x(11-7) [7,7,12,12] (7+7-12)x12 12+12+7-7 [7,7,12,13] 7x7-13-12 13+12-7/7 [7,7,13,13] [7,8,8,8] [7,8,8,9] (9-7)x8+8 [7,8,8,10] 10x8-8x7 [7,8,8,11] (11-7)x8-8 [7,8,8,12] (8+7-12)x8 [7,8,8,13] (13+8)x8/7 [7,8,9,9] [7,8,9,10] 9x8/(10-7) [7,8,9,11] [7,8,9,12] (12+9)x8/7 (9+7)x12/8 [7,8,9,13] (9+7-13)x8 [7,8,10,10] (10-8)x7+10 [7,8,10,11] (11+10)x8/7 [7,8,10,12] [7,8,10,13] 13+10+8-7 [7,8,11,11] [7,8,11,12] 12+11+8-7 12x8/(11-7) [7,8,11,13] (13+11)x(8-7) (13-8)x7-11 [7,8,12,12] (12+12)x(8-7) [7,8,12,13] (8+7-13)x12 13+12+7-8 (13-7)x(12-8) [7,8,13,13] [7,9,9,9] [7,9,9,10] [7,9,9,11] [7,9,9,12] [7,9,9,13] 13+9+9-7 [7,9,10,10] [7,9,10,11] (10-7)x11-9 (11-9)x7+10 [7,9,10,12] 12+10+9-7 [7,9,10,13] [7,9,11,11] 11+11+9-7 [7,9,11,12] (11+7)x12/9 (11-7)x9-12 [7,9,11,13] [7,9,12,12] 12x9-12x7 [7,9,12,13] [7,9,13,13] 13+13+7-9 (13-7)x(13-9) [7,10,10,10] [7,10,10,11] 11+10+10-7 [7,10,10,12] (12-10)x7+10 [7,10,10,13] [7,10,11,11] [7,10,11,12] [7,10,11,13] (13-11)x7+10 [7,10,12,12] (10-7)x12-12 12x10/(12-7) [7,10,12,13] (13+7)x12/10 [7,10,13,13] [7,11,11,11] [7,11,11,12] [7,11,11,13] [7,11,12,12] [7,11,12,13] [7,11,13,13] [7,12,12,12] [7,12,12,13] 12x12/(13-7) (13x12+12)/7 [7,12,13,13] [7,13,13,13] [8,8,8,8] [8,8,8,9] [8,8,8,10] (10-8)x8+8 [8,8,8,11] 11x8-8x8 [8,8,8,12] (8+8)x12/8 (12-8)x8-8 [8,8,8,13] (8+8-13)x8 [8,8,9,9] [8,8,9,10] [8,8,9,11] 9x8/(11-8) (11-9)x8+8 [8,8,9,12] 12x8-9x8 [8,8,9,13] (13-9)x8-8 [8,8,10,10] [8,8,10,11] [8,8,10,12] (12-10)x8+8 [8,8,10,13] 8/8+13+10 13x8-10x8 [8,8,11,11] [8,8,11,12] 8/8+12+11 [8,8,11,13] 13+11+8-8 (13-11)x8+8 [8,8,12,12] 12+12+8-8 12x8/(12-8) [8,8,12,13] 13+12-8/8 [8,8,13,13] [8,9,9,9] [8,9,9,10] [8,9,9,11] [8,9,9,12] 9x8/(12-9) [8,9,9,13] [8,9,10,10] [8,9,10,11] [8,9,10,12] (10+8)x12/9 12x10/8+9 [8,9,10,13] 9x8/(13-10) 13+10+9-8 [8,9,11,11] (11-8)x11-9 [8,9,11,12] 12+11+9-8 [8,9,11,13] (13+11)x(9-8) [8,9,12,12] (12+12)x(9-8) (12-8)x9-12 12x12/9+8 [8,9,12,13] 13+12+8-9 12x8/(13-9) [8,9,13,13] [8,10,10,10] [8,10,10,11] [8,10,10,12] 12+10+10-8 [8,10,10,13] [8,10,11,11] 11+11+10-8 [8,10,11,12] [8,10,11,13] [8,10,12,12] (12+8)x12/10 12x10-12x8 [8,10,12,13] 12x10/(13-8) [8,10,13,13] 13+13+8-10 [8,11,11,11] [8,11,11,12] [8,11,11,13] [8,11,12,12] (11-8)x12-12 [8,11,12,13] [8,11,13,13] [8,12,12,12] [8,12,12,13] [8,12,13,13] [8,13,13,13] [9,9,9,9] [9,9,9,10] [9,9,9,11] [9,9,9,12] (9+9)x12/9 [9,9,9,13] [9,9,10,10] [9,9,10,11] [9,9,10,12] [9,9,10,13] 9/9+13+10 [9,9,11,11] [9,9,11,12] 9/9+12+11 (12-9)x11-9 [9,9,11,13] 13+11+9-9 [9,9,12,12] 12+12+9-9 [9,9,12,13] 13+12-9/9 (13-9)x9-12 [9,9,13,13] [9,10,10,10] [9,10,10,11] [9,10,10,12] [9,10,10,13] 13+10+10-9 [9,10,11,11] [9,10,11,12] 12+11+10-9 (11+9)x12/10 [9,10,11,13] (13+11)x(10-9) (13-10)x11-9 [9,10,12,12] (12+12)x(10-9) [9,10,12,13] 13+12+9-10 [9,10,13,13] [9,11,11,11] 11+11+11-9 [9,11,11,12] [9,11,11,13] [9,11,12,12] 12x11-12x9 [9,11,12,13] (13+9)x12/11 [9,11,13,13] 13+13+9-11 [9,12,12,12] (12-9)x12-12 [9,12,12,13] [9,12,13,13] [9,13,13,13] [10,10,10,10] [10,10,10,11] [10,10,10,12] (10+10)x12/10 [10,10,10,13] 10/10+13+10 [10,10,11,11] [10,10,11,12] 10/10+12+11 [10,10,11,13] 13+11+10-10 [10,10,12,12] 12+12+10-10 [10,10,12,13] 13+12-10/10 [10,10,13,13] [10,11,11,11] [10,11,11,12] 12+11+11-10 [10,11,11,13] (13+11)x(11-10) 11/11+13+10 [10,11,12,12] (12+12)x(11-10) (12+10)x12/11 [10,11,12,13] 13+12+10-11 [10,11,13,13] [10,12,12,12] 12x12-12x10 [10,12,12,13] 12/12+13+10 (13-10)x12-12 [10,12,13,13] 13+13+10-12 [10,13,13,13] 13/13+13+10 [11,11,11,11] [11,11,11,12] (11+11)x12/11 11/11+12+11 [11,11,11,13] 13+11+11-11 [11,11,12,12] 12+12+11-11 [11,11,12,13] 13+12-11/11 (13+11)x(12-11) [11,11,13,13] [11,12,12,12] 12/12+12+11 (12+12)x(12-11) [11,12,12,13] 13+12+11-12 13x12-12x11 [11,12,13,13] 13/13+12+11 (13+11)x(13-12) [11,13,13,13] 13+13+11-13 [12,12,12,12] 12+12+12-12 [12,12,12,13] (12+12)x(13-12) 13+12-12/12 [12,12,13,13] 13+12+12-13 [12,13,13,13] 13+12-13/13 (13+13)x12/13 [13,13,13,13] [";
var the_location = [78,120,144,166,229,259,281,301,324,359,401,432,483,503,525,555,587,605,638,660,684,706,729,749,779,797,829,871,894,927,970,1002,1032,1066,1140,1182,1202,1245,1308,1362,1480,1525,1547,1571,1593,1617,1639,1661,1685,1725,1745,1777,1817,1849,1879,1900,1946,1979,
2034,2066,2086,2126,2178,2218,2256,2308,2357,2412,2467,2511,2541,2583,2615,2647,2677,2727,2768,2814,2860,2926,2971,2989,3031,3073,3125,3166,3206,3250,3282,3332,3384,3422,3453,3508,3528,3572,3591,3611,3649,3676,3698,3718,3750,3780,3819,3863,3904,3926,3946,3981,4003,4027,4049,4073,4107,4133,4171,4205,4227,4259,4299,4331,4361,4381,4411,4466,4499,4521,4575,4605,4655,4675,4721,4773,4822,4868,4912,4967,5007,5035,5069,5107,5150,5179,5216,5271,5305,5347,5397,5447,5510,5532,5565,5631,5663,5685,5715,5736,5778,5800,5832,5872,5901,5923,5943,5985,6006,6027,6049,6091,6146,6167,6189,6223,6257,6279,6325,6349,6383,6403,6435,6455,6485,6513,6543,6572,6594,6616,6672,6700,6730,6758,6790,6821,6856,6878,6911,6934,6964,6994,7034,7055,7077,7112,7178,7221,7243,7293,7327,7349,7402,7434,7474,7524,7555,7608,7660,7680,7722,7764,7785,7819,7841,7937,7995,8015,8063,8086,8108,8132,8154,8173,8193,8221,8241,8262,8297,8330,8385,8416,8448,8471,8502,8559,8612,8657,8687,8730,8761,8794,8849,8870,8889,8911,8931,8964,8989,9011,9035,9069,9093,9117,9153,9199,9229,9249,9270,9292,9332,9376,9424,9447,9491,9535,9598,9628,9667,9711,9755,9799,9833,9866,9908,9963,10010,10034,10070,10094,10118,10152,10206,10225,10260,10293,10325,10343,10374,10405,10440,10485,10504,10528,10552,10587,10649,10685,10747,10771,10795,10817,10837,10856,10878,10900,10976,11022,11066,11101,11127,11163,11213,11237,11261,11340,11411,11435,11461,11487,11511,11537,11612,11664,11718,11744,11811,11837,11878,11904,11930,11971,11997,12023,12069,12097,12149,12179,12199,12261,12282,12311,12344,12386,12418,12460,12490,12510,12560,12590,12618,12679,12701,12723,12820,12841,12871,12935,12995,13059,13145,13174,13277,13326,13370,13418,13446,13488,13506,13526,13547,13604,13639,13680,13708,13738,13808,13839,13879,13901,13991,14012,14032,14081,14114,14134,14186,14234,14253,14326,14418,14440,14469,14521,14553,14589,14611,14635,14657,14679,14713,14735,14757,14797,14827,14885,14925,14975,15024,15055,15088,15119,15171,15209,15239,15335,15377,15417,15458,15520,15564,15641,15682,15722,15788,15824,15862,15911,15946,16030,16052,16091,16161,16197,16235,16322,16401,16452,16563,16600,16618,16670,16711,16742,16793,16846,16876,16916,16947,16976,17027,17124,17145,17192,17254,17276,17321,17357,17447,17481,17503,17525,17551,17611,17633,17653,17711,17753,17801,17831,17939,17960,18011,18044,18106,18138,18158,18214,18246,18322,18365,18385,18416,18462,18503,18575,18633,18717,18794,18886,18939,19056,19108,19128,19164,19193,19248,19292,19335,19393,19414,19538,19589,19677,19705,19724,19764,19830,19884,19908,19954,20034,20070,20102,20138,20208,20258,20276,20296,20325,20347,20380,20409,20454,20484,20522,20580,20599,20652,20707,20769,20801,20819,20839,20858,20902,20955,21005,21033,21084,21119,21152,21185,21257,21277,21319,21384,21420,21462,21498,21552,21600,21660,21704,21738,21778,21838,21881,21919,21941,22007,22038,22068,22115,22150,22172,22194,22248,22286,22315,22407,22462,22546,22585,22616,22651,22702,22778,22810,22844,22964,23024,23068,23104,23160,23224,23263,23285,23318,23347,23368,23408,23440,23495,23528,23580,23624,23666,23707,23745,23777,23847,23917,23953,23999,24037,24058,24089,24111,24153,24196,24225,24258,24289,24342,24389,24449,24519,24563,24597,24621,24657,24741,24765,24809,24831,24871,24894,24916,24954,24992,25026,25072,25118,25154,25192,25218,25257,25298,25324,25374,25428,25491,25517,25541,25604,25643,25682,25745,25782,25821,25845,25868,25886,25916,25934,25982,26014,26032,26053,26084,26104,26167,26195,26235,26253,26283,26325,26375,26406,26468,26489,26507,26585,26615,26670,26723,26754,26782,26802,26840,26870,26935,26992,27036,27067,27110,27130,27148,27198,27231,27275,27296,27316,27357,27399,27456,27477,27522,27542,27575,27617,27678,27712,27756,27778,27824,27866,27886,27914,27986,28016,28062,28111,28133,28153,28186,28216,28242,28262,28330,28400,28431,28462,28493,28586,28616,28672,28732,28765,28816,28858,28946,28978,29024,29044,29093,29137,29183,29250,29301,29356,29409,29480,29512,29572,29605,29687,29710,29744,29816,29872,29918,29976,30014,30056,30086,30118,30148,30190,30210,30242,30274,30304,30344,30425,30456,30498,30542,30575,30611,30660,30706,30741,30783,30804,30832,30872,30931,30964,30983,31014,31058,31115,31158,31182,31216,31250,31298,31320,31356,31390,31426,31446,31496,31534,31562,31607,31629,31651,31744,31776,31806,31844,31893,31924,31959,31989,32025,32078,32111,32144,32163,32202,32266,32323,32374,32415,32451,32485,32587,32621,32657,32681,32741,32765,32797,32825,32843,32864,32906,32928,32960,33000,33032,33074,33127,33157,33200,33242,33275,33328,33360,33394,33444,33488,33512,33572,33620,33666,33688,33716,33747,33769,33789,33830,33849,33893,33924,33959,33991,34013,34037,34073,34109,34145,34189,34237,34257,34296,34318,34351,34402,34427,34451,34485,34523,34557,34593,34641,34667,34713,34749,34800,34876,34902,34995,35034,35086,35112,35138,35174,35192,35212,35230,35262,35310,35331,35362,35384,35434,35472,35502,35522,35591,35624,35653,35686,35725,35757,35788,35819,35841,35927,35948,35968,35996,36025,36060,36106,36125,36173,36192,36236,36271,36322,36376,36398,36445,36481,36527,36575,36597,36631,36665,36709,36737,36755,36775,36795,36824,36876,36906,36938,36958,36977,37028,37050,37072,37093,37121,37171,37218,37240,37271,37304,37338,37368,37399,37454,37489,37564,37594,37615,37661,37690,37722,37756,37790,37824,37846,37882,37928,37954,38004,38050,38072,38102,38142,38216,38255,38288,38329,38355,38385,38406,38470,38513,38563,38602,38646,38734,38755,38774,38836,38882,38903,38949,38973,39039,39071,39107,39163,39187,39217,39237,39289,39341,39379,39422,39442,39464,39495,39527,39548,39590,39623,39665,39697,39721,39769,39831,39855,39879,39901,39949,39985,40007,40045,40066,40119,40141,40183,40204,40225,40247,40291,40331,40363,40409,40433,40531,40565,40625,40663,40699,40733,40776,40807,40864,40888,40912,40950,40972,41030,41128,41152,41204,41228,41254,41306,41412,41475,41546,41564,41612,41653,41685,41723,41749,41789,41841,41887,41926,41948,41991,42009,42038,42071,42091,42113,42147,42166,42186,42233,42255,42289,42323,42345,42389,42411,42455,42487,42507,42527,42575,42595,42614,42669,42719,42739,42781,42824,42857,42907,42937,42968,43019,43063,43084,43115,43146,43179,43214,43239,43275,43313,43347,43369,43393,43439,43477,43515,43561,43603,43626,43648,43691,43721,43750,43817,43839,43863,43885,43919,43941,43965,44013,44039,44087,44113,44147,44167,44193,44224,44277,44318,44362,44393,44426,44448,44496,44546,44584,44652,44672,44726,44748,44782,44840,44866,44902,44966,44992,45029,45055,45118,45144,45233,45347,45383,45415,45444,45464,45486,45549,45582,45604,45624,45665,45685,45716,45751,45773,45824,45856,45889,45924,45966,46011,46075,46121,46143,46191,46225,46288,46310,46361,46382,46424,46457,46489,46550,46595,46631,46675,46723,46747,46795,46821,46847,46891,46911,46940,46984,47006,47047,47078,47100,47122,47153,47197,47221,47291,47315,47337,47361,47395,47475,47506,47526,47559,47603,47635,47707,47731,47755,47803,47864,47914,47953,47992,48029,48081,48118,48144,48183,48209,48235,48322,48386,48440,48532,48566,48600,48636,48670,48722,48743,48763,48785,48807,48839,48872,48905,48928,48952,48988,49022,49056,49094,49120,49222,49255,49291,49325,49347,49395,49429,49479,49503,49568,49594,49633,49763,49846,49868,49888,49921,49964,49997,50017,50064,50088,50132,50154,50188,50222,50287,50345,50379,50413,50437,50459,50485,50533,50606,50643,50693,50730,50756,50819,50953,51023,51057,51091,51113,51135,51221,51258,51295,51336,51364,51401,51451,51475,51501,51525,51619,51647,51687,51713,51739,51765,51819,51845,51887,51931,51971,51997,52037,52063,52103,52143,52169,52195,52251,52293,52331,52373,52399,52425,52467,52493];

var game_type1  = " 游戏规则和信息       ", game_type2  = "   开始24点游戏     ", game_type3 = "      排名榜    ", text_never_show_sol ="     再也不要显示答案了         ", text_takemeback = "    回到游戏!";  //texthere
 
var url24 = "http://www.24lilun.com";
var urlappstore = "http://www.24lilun.com/apps/24game_ios_redirect.html";
var urlsolverstore = "http://www.24lilun.com/apps/24solver_ios_redirect.html";
var urlappfree = "http://www.24lilun.com/apps/24gamefree_ios_redirect.html";




var INFO_TEXT = "&nbsp;&nbsp;你在玩 <p3>24点挑战赛</p3> 来自  <a href =\"javascript:void(0)\" onclick=\"loadURL('"+ url24 +"');\" >24理论</a>. "+
"<br><br>你每次会得到四个1和13之间数, 用 + - \u00D7 和 / 四则运算 <p1>算出24来</p1>." +
"游戏开始后你有 <p2>120</p2> 秒的时间, 每解决一道题奖励 <p2>10</p2>秒, 每放弃一道题罚 <p2>20</p2>秒. <p1> 战胜时间! </p1>"+
"<br><br> 游戏结束的时候, 我们比较你的得分与其它本机和全国选手得分. 争取进入英雄榜吧!"+
"<br><br>别忘了我们的免费游戏: <a href =\"javascript:void(0)\" onclick=\"loadURL(urlappfree);\" >24点练习</a>, "+
 "<br><br>和免费解法应用: <a href =\"javascript:void(0)\" onclick=\"loadURL(urlsolverstore);\" >  24点解法器 </a>."+
 "<h2> 玩吧! </h2> "; //texthere

var HELP_TEXT = "用所给的四个数和 + - \u00D7 和 \u00F7 四则运算算出24来. 规则和 <a href =\"javascript:void(0)\" onclick=\"loadURL(url24);\" > 24理论</a>网站上是一样的. " +
" <br><br> 比如, 对于以下这个游戏 <p2>[1 2 3 4]</p2>  你找到了一个解: <p1>(1+2+3)\u00D74</p1>. 你只需要做如下操作 " +
"按照自然的顺序点击 <p2>1, +, 2, +, 3, \u00D7, 4</p2>, 无需括号."+
"<br><br>  点击 <p3>\u2295</p3> 来把剩下所有数字相加,  点击 <p4>\u2297</p4> 来把剩下所有数字相乘."+
" <br> 点击 \u2190 来取消上一次操作, 点击 \u2192 来重复取消的操作." + 
"<h2> 玩吧! </h2> ";  //texthere
 

var snd1 = null, snd2 = null;
var canvasID      = "canvasID";
var canvas_ele; 
var canvas_cts;
var game_type_txt = "game_type";
var mainbodyID    = "page_body";
var status1       = 0;  // 0 : init screen 1: in game 3: quit or not, 4: showing solution
var width,  		height ;
var percent_w_init = 0.2, percent_h_init  = 0.2,    TOTAL_INIT_RECT  = 3;
var solved = 0, unsolved = 1362, totalQ = 1362;
var this_quad;
var time_now = 0, time_left = 0, time_tick = 0, game_tick = 0;  // time_tick is .01 second
var pause_tick = 0, pause_total = 400, pause_total1;
var coffee_tick = 0, coffee_total = 60001, coffee_num = 100, coffee_waiting = 0; 
var now, before;
var score_all = 0;  // the score 
var game_type = -1;
var id_array = new Array();
var time_array = new Array();
var show_sol = 1;

var quad, quad_c, quad_pos;  // the four numbers now and their positions
var quad_all, quad_prev, quad_all_prev;
var op_array = new Array('+', '-', '\u00D7', '\u00F7');
var op_focus, num_focus;
var past_steps, future_steps;
var this_order;

var num_rect, op_rect;
var rect_clock, rect_solved,  rect_score;
var rect_quit, rect_skip, rect_undo, rect_redo, rect_addall, rect_multiplyall, rect_help, rect_www;
var rect_all, rect_QUIT_array, rect_init_array; // rect_all is for game,  rect_QUIT_array is for quitting
var rect_sol, rect_no_sol, 	q_ratio =  0.05 , messbox;
var rect_records; 
var ep = 0.000001;
var speaker_on = 0; 
var num_ratio = 2/5, marg_ratio =  0.05, rect_thin_width = 3, rect_fat_width = 10;
var quit_ratio = 0.8;
var rect_quit1,init_sec, rect_intro;
var pop_net= new myPop(0);
var NET_READ_TEXT = "<h3>正在试图链接 <p2>www.24lilun.com</p2> 的服务器,  这只在有网络的时候可行. </h3>  "+
	"<div  style=\"width:100%; text-align:center\"><IMG align:\"middle\" class=\"displayed\" src=\"img/ajax-loader.gif\"></div> "+"<h3><p2>www.24lilun.com</p2>有更多24点数学游戏的信息</h3>"; //texthere
var gameover_flag = 0;
var ind_now;
function playSound(soundfile) {
 document.getElementById("dummy").innerHTML="<embed src=\""+soundfile+"\" hidden=\"true\" autostart=\"true\" loop=\"false\" />";
 }
function alert1(str1)
{
	alert(str1);
   // window.location.reload(true);
}
function arraytostring(array1){
	var str1 = " ";
	for (ii = 0; ii < array1.length; ii ++)
	{
		str1 =  str1 + " " + array1[ii];
	}
	return str1;
}

function pack0(num1)
{
	if (num1 >9)
		return num1;
	else
		return ('0'+num1);
}
function get_name(final_message){
	var playername = null; 
	playername = prompt(final_message,"");
	return(playername);
}
function collecting_data_finish(final_score,lrank, grank)
{
	var final_message = "最后得分: " + final_score  +". ";//texthere
	var internet = 0; 
     if (lrank > TOTAL_LOCAL_RECORD)
	{
		final_message += "没有进入本机前 " +TOTAL_LOCAL_RECORD + ", 也没有在全国前 "+
			TOTAL_GLOBAL_RECORD +" 名.  再努力!" ;   //texthere
		alert1(final_message);
	}
	else{
		 final_message +="本机排名: " + lrank +". ";
		 var d11 = new Date();
		 var str1 ='';
		 if (grank > TOTAL_GLOBAL_RECORD)
		 {
		 	final_message +="全国没有进入前"+ TOTAL_GLOBAL_RECORD+ ". ";
		 }
		 else
		 {
		 	final_message +="全国排名: " + grank +". ";
		 }
		final_message += "输入你的名字";  //texthere
		var playername  =get_name(final_message);
		str1 += d11.getFullYear() + pack0(d11.getMonth()+1 )+ 
		pack0(d11.getDate()) + pack0(d11.getHours()) + pack0(d11.getMinutes()) +pack0(d11.getSeconds()) +
		 pack0(Math.floor(d11.getMilliseconds()/10));
	}
	if (internet == 0)
	   setTimeout( function(){ init_game(250,400)},100);
	return; 
}
function gameover(){// quit or finished all
//	load_DATA(); // read the record file into DATA_FILECONTENT
	var final_score = Math.round(score_all + time_now);
	var rank_this = get_rank (DATA_FILECONTENT, final_score);
	gameover_flag = 1; 
	status1 = 10; 
	if (solved < 5)
	{
        alert1("游戏结束! \r\n 需要解决至少5道题才能进入排名榜!");
        setTimeout( function(){  init_game(250,400)},100);
    }
	else if (rank_this <= TOTAL_LOCAL_RECORD)
	{
		 
		lowest_global = 200;  
		if (final_score >= lowest_global )
		{
			var info_v = new Array(final_score, rank_this); // send the score and the local_rank
			test_r(1,1, info_v); 
		}
		else
		{	
			collecting_data_finish(final_score,rank_this, 2000);
		}
	        setTimeout( function(){  init_game(250,400)},100);

	}
	else {
		collecting_data_finish(final_score,rank_this, 2000);
        setTimeout( function(){  init_game(250,400)},100);

	}
	return; 
}

function new_quad(){
//	this_order[this_quad * 0 ] = 0;
	var this_game = this_order[this_quad];  // first, grab the index of the game where  this_quad is (0,1,....) linearly
	quad_all = grab_quad_sol(this_game); 
	var quad1 = quad_all[0].split(",");
	quad = new Array();  	quad_c = new Array();
	for (ii = 3; ii >= 0; ii--) {
		thisone = Math.floor(Math.random()* (ii+1) );
		quad.push( Number(quad1[thisone]));
		quad_c.push( Number(quad1[thisone]));
		quad1.splice(thisone, 1);
	}
	time_tick = 0;
	quad_pos = new Array(0,1,2,3);
	op_focus = -1; // nothing on focus
	num_focus = -1; // nothing on focus
	past_steps = new Array();  //  no past yet
	future_steps = new Array(); // no future yet
}

function solved1(solvedone){ // just solved one quad, move on to the next one
	id_array.push(this_order[this_quad]); // save the quad
	this_quad++;
	quad_all_prev = quad_all; quad_prev = quad_c;  
	var a = quad_all_prev[1].split(" ");  
	pause_total1 = pause_total + a.length * 100;

	if (solvedone){
		solved ++;
		time_array.push(time_tick);
		score_all += 10 * ( 1 + 2 / a.length);
	}
	else {time_array.push(-time_tick);}
	unsolved --;
	if (show_sol == 1)
	{	pause_tick =0; status1 = 4; // showing solutions
	}
	if (unsolved >0){ new_quad();  }
	else{ 
		status1 = 6;// game over 
		gameover();
		}
	if (unsolved >0 && solvedone && solved%coffee_num ==0){
		if (show_sol ==0)
		{	coffee_tick = 0;status1 = 5;}
		else{ coffee_tick = 0;coffee_waiting = 1;}
	}
	if(unsolved>0)
		game_draw(0);
}


function calc(num1, op1, num2){	// caucluate num1 (op1) num2
	var num3 = 0.0;
	switch(op1){
		case 0: num3= num1 + num2; break;
		case 1: num3= num1 - num2;break;			 
		case 2: num3= num1 * num2;break;
		case 3: num3= num1 / num2;break;
	}
	if (Math.abs(num3 - Math.round (num3)) < ep) // num1 is integer
		return (Math.round(num3));
	else return (num3);
}


function game_order(){ // pick up the order of games
	var TOTAL_GAME = 1362;
	var final_order = new Array();
	var listall = new Array();
	for (ii = 0; ii < TOTAL_GAME; ii++){
		listall.push(ii);
	}
	var thisone; 
	for (ii = TOTAL_GAME -1; ii >=0; ii--){
		thisone = Math.floor(Math.random()* (ii + 1) );
		final_order.push(listall[thisone]);
		listall.splice(thisone, 1);
	}
	return final_order;
} 
function grab_quad_sol(this_id){
	var res = new Array();
	var pos = the_location[this_id];
	var ii = pos;
	while(the_string[ii] != "[") {ii--;}
	ii ++;
	res.push(the_string.substring(ii, pos));
	var jj = pos;
	while(the_string[jj] != "[") {jj++;}
	res.push(the_string.substring(pos + 2, jj-1));
	return res;
}


function ongame(regionID){
	if (regionID == -1) {return; } // clicked outside of the region
	if (regionID <4) { // click on one of the numbers
		var numrect_id = -1;
		var numfocus_id ;
		for (ii = 0; ii < quad.length; ii ++){
			if (regionID == quad_pos[ii]){ numrect_id = ii; }
			if (num_focus == quad_pos[ii]) {numfocus_id = ii;}
		}
		if (numrect_id < 0  || num_focus == regionID ){ return; }  // the region is gone already, or clicking on the already focused num
		else{
			if (op_focus < 0) {num_focus = regionID;}  // no op is chosen yet, change num_focus
			else{ // op is chosen, we'll do the calculation and do the logistics
				if (op_focus == 3 && Math.abs( quad[numrect_id])< ep) { return; }  // divided by 0
				else{
					past_steps.push(Array(quad.slice(0), quad_pos.slice(0), num_focus));
					quad[numrect_id] = calc( quad[numfocus_id], op_focus, quad[numrect_id]);
					num_focus = quad_pos[numrect_id];
					op_focus = -1;
					quad.splice(numfocus_id,1); 
					quad_pos.splice(numfocus_id,1);
					future_steps = new Array(); // nothing left to redo
				}
			}
		}
	}
	else if (regionID <8){ 
		var op_ID = regionID - 4;
		if (num_focus >=0 && quad.length > 1) {op_focus = op_ID;} // if some number is chosen and there are more than 2 nums left, then highlight the op
		else{return;} // no num is chosen, do nothing here
	}
	else if (regionID ==8){//undo
		if (past_steps.length>0 || op_focus >=0){ // there is something to undo
			if (op_focus >=0) {op_focus = -1;}  // change the choice of op
			else{
				future_steps.push(Array(quad.slice(0), quad_pos.slice(0),num_focus));
				var last_quads = past_steps.pop();
				quad = last_quads[0]; 
				quad_pos = last_quads[1];
				num_focus = last_quads[2];
			}
		}		
	}
	else if (regionID ==9){//redo
		if (future_steps.length >0){
			past_steps.push(Array(quad.slice(0), quad_pos.slice(0),num_focus));
			var next_quads = future_steps.pop();
			quad = next_quads[0]; 
			quad_pos = next_quads[1];
			num_focus = next_quads[2];
		}
	}
	else if (regionID ==10){//skip
		solved1(0); // didn't solve one.
	}
	else if (regionID ==11){//quit
		status1 = 3;
		game_draw(0);
	}
	else if (regionID == 12){// add all
		 op_focus = -1;   ongame(0);ongame(4);ongame(1);ongame(4);ongame(2);ongame(4);ongame(3);ongame(4);  game_draw(0); 
	}
 	else if (regionID == 13){// multiply all
		 op_focus = -1;   ongame(0);ongame(6);ongame(1);ongame(6);ongame(2);ongame(6);ongame(3);ongame(6);  game_draw(0); 
	}
	else if (regionID == 15){
			loadURL1(url24);
	}
	else if (regionID == 14){
		var pop = new myPop(1);
        pop.popOut(HELP_TEXT); 
    }
}

function init_game(w1, h1){
 serverResponse  =serverResponse.replace(/a7b934/g,"\n"); 
	      game_tick = 0; 
   	canvas_ele   =  document.getElementById(canvasID) ;
	canvas_ele.addEventListener("click", onclick1, false);

	var c=document.getElementById(canvasID);
	canvas_cts=c.getContext("2d");  		
   canvas_cts.canvas.width  =  w1;
  	canvas_cts.canvas.height =  h1;	
	canvas_cts.fillStyle="#FFFFFF";
	canvas_cts.fillRect(0,0,canvas_cts.canvas.width,canvas_cts.canvas.height);
  	
	rect_array_all = new Array();
	texts_on_recs = new Array();
	
	W = canvas_cts.canvas.width ;
    H = canvas_cts.canvas.height; 
		width  = w1;
	height = h1;
	status1   = 0;
	
	speaker_on = 0; 
	var N1 = num_ratio; 
     rect_quit1  = new Array( width * ( 1- (1-N1*2) * quit_ratio), marg_ratio * width * N1, (1-N1*2) * quit_ratio* width, (1-N1*2) * quit_ratio* width);
     rect_intro = new Array(0,0,width,height/2);  	
	rect_init_array = new Array();
	for (ii = 0; ii < TOTAL_INIT_RECT ; ii ++){
		var tmp = new Array( width * percent_w_init / 2,   height/2 + (0.5 + ii )*height * percent_h_init / (TOTAL_INIT_RECT *2) + ii * 0.5* height * ( 1- percent_h_init) / TOTAL_INIT_RECT, 	  	  width * ( 1- percent_w_init),   0.5* height * ( 1- percent_h_init) / TOTAL_INIT_RECT);
		rect_init_array.push(tmp);
	}
	rect_init_array.push(rect_quit1); 
	canvas_cts = canvas_ele.getContext( "2d");
	ind_now = 1; 
	game_draw(0);
}

function click_ID(x,y, rect_array){
	var total = rect_array.length;
	var ii ;
	for ( ii = 0; ii < total ; ii ++){
		if (x >= rect_array[ii][0] && x <= rect_array[ii][0] + rect_array[ii][2] && y >= rect_array[ii][1] && y <= rect_array[ii][1] + rect_array[ii][3]){
			return ii;
		}
	}
	return -1 ;
}
function draw_rect(rect1, color1, border_wid1, color2 ){
	canvas_cts.fillStyle = color1;   // button color
	canvas_cts.fillRect (rect1[0], rect1[1], rect1[2], rect1[3]);	
	canvas_cts.lineWidth   = border_wid1;
	canvas_cts.strokeStyle  = color2;   // button color
	if (border_wid1>0)
		canvas_cts.strokeRect(rect1[0] + border_wid1/ 2, rect1[1] + border_wid1/2, rect1[2] - border_wid1, rect1[3] - border_wid1);
}

function draw_text (xy_array, text1, fillstyle1, font1){
	canvas_cts.fillStyle = fillstyle1; // font color
	canvas_cts.font = font1; 
	canvas_cts.fillText(text1, xy_array[0], xy_array[1]);
}
function text_in_rect(rect1, text_string)
{ // given text string and the rect, return the ideal x,y and fontsize
	var fontsize = rect1[2] /Math.max(5, text_string.length + 2) * 2;
	var y = rect1[1] + rect1[3]/1.9 + 0.2 *  fontsize ;
	var x = rect1[0] + rect1[2]/2 - fontsize * text_string.length /4;
	return (Array(x,y, fontsize));	
}
function text_in_rect1(rect1, text_length)
{ // given text string and the rect, return the ideal x,y and fontsize
	var fontsize = rect1[2] /Math.max(5, text_length + 2) * 2;
	var y = rect1[1] + rect1[3]/1.9 + 0.2 *  fontsize ;
	var x = rect1[0] + rect1[2]/2 - fontsize * text_length /4;
	return (Array(x,y, fontsize));	
}

 

function num_to_string (num1){
	var  result = "";
	if (Math.abs(num1 - Math.round (num1)) < ep) // num1 is integer
		return (result + num1);
	var ii = 2;
	var ii_mul_num1;
	while (1) {
		ii_mul_num1 = ii * num1;
		if (Math.abs(ii_mul_num1 - Math.round (ii_mul_num1)) < ep){
			return (result + Math.round(ii_mul_num1) + "/" + ii);
		}
		else 
			ii ++;
	}
	return result;
}

function num_to_string1 (num1){
	var  result = "";
	if (num1 - Math.ceil (num1) > -ep) // num1 is integer
		return (result + num1);
	var ii = 2;
	var ii_mul_num1;
	while (1) {
		ii_mul_num1 = ii * num1;
		if (ii_mul_num1 - Math.ceil (ii_mul_num1) > -ep){
			return (result + Math.round(ii_mul_num1) + "/" + ii);
		}
		else 
			ii ++;
	}
	return result;
}


function start_game(){ 
	status1 = 1;
	if (game_type == 0)
		time_now = 120;
	else time_now = 0;
	solved   = 0;
	unsolved = totalQ;
	score_all = 0;
	this_quad = 0;  // start from the first game
	this_order = game_order();
	new_quad ();
	now, before = new Date()
	show_sol = 1;
	pause_total = 501;
	coffee_total = 60001; coffee_waiting = 0;
	gameover_flag = 0; 
	var N1 = num_ratio; 
	var rect1 = new Array( marg_ratio * width * N1,marg_ratio * width * N1, (1- 2 * marg_ratio) * width * N1, (1- 2 * marg_ratio) * width* N1);
	var rect2 = new Array( (1 + marg_ratio )* width * N1,marg_ratio * width * N1, (1- 2 * marg_ratio) * width * N1, (1- 2 * marg_ratio) * width* N1);
	var rect3 = new Array( marg_ratio * width * N1, (1 + marg_ratio) * width* N1, (1- 2 * marg_ratio) * width * N1, (1- 2 * marg_ratio) * width* N1);
	var rect4 = new Array( (1 + marg_ratio) * width * N1, (1 + marg_ratio)* width* N1, (1- 2 * marg_ratio) * width * N1, (1- 2 * marg_ratio) * width* N1);
	num_rect  = new Array(rect1, rect2, rect3, rect4);  // the rects for the numbers
	rect_all  = new Array(rect1, rect2, rect3, rect4);   	

	var UNIT_wh = width / 4; 
	var Lower_height = (height -  N1 * width) / 3;
	if (UNIT_wh > Lower_height)
		UNIT_wh = Lower_height; 

	marg_ratio = 0.05;	
	var tmp1 =  (1- 2 * marg_ratio) *UNIT_wh;
	op_rect = new Array();
	for (ii = 0; ii < 4; ii ++){	
		rect1 = new Array( (1 + ii * 2) * width/8 - tmp1/2, N1 *2* width +(height - N1 * 2*width)/6 - tmp1/2, tmp1, tmp1);
		op_rect.push(rect1); rect_all.push(rect1);
	}
	
	var rect_tmpv = new Array();
	for (ii = 0; ii < 4; ii ++){
		var tmp1 =  (1- 2 * marg_ratio) *UNIT_wh;
		rect1 = new Array( (1 + ii * 2) * width/8 - tmp1/2, N1 *2* width +(height - N1 * 2*width)/2 - tmp1/2, tmp1, tmp1);
		rect_tmpv.push(rect1);
	}
	rect_undo = rect_tmpv[0];
	rect_redo = rect_tmpv[3];
	rect_addall = rect_tmpv[1];
	rect_multiall = rect_tmpv[2];

	rect_help = new Array( (1 + 0 * 2) * width/8 - tmp1/2, N1 *2* width +(height - N1 * 2*width)*5/6 - tmp1/2, tmp1, tmp1);
	rect_www = new Array( (1 + 1 * 2) * width/8 - tmp1/2, N1 *2* width +(height - N1 * 2*width)*5/6 - tmp1/2, 2*tmp1 + 2 * marg_ratio *UNIT_wh, tmp1);
	rect_skip = new Array( (1 + 3 * 2) * width/8 - tmp1/2, N1 *2* width +(height - N1 * 2*width)*5/6 - tmp1/2, tmp1, tmp1);

	rect_quit  = new Array( width * ( 1- (1-N1*2) * quit_ratio), marg_ratio * width * N1, (1-N1*2) * quit_ratio* width, (1-N1*2) * quit_ratio* width);

	rect_all.push(rect_undo, rect_redo, rect_skip, rect_quit, rect_addall, rect_multiall, rect_help, rect_www); // rect 8,9,10,11
	
	rect_tmpv = new Array();
	for (ii = 0; ii < 3; ii ++){
		var tmp1 =  N1 * width, tmp2 = width - 2* N1* width + N1 *  marg_ratio * N1;
		rect1 = new Array( width - tmp2, (ii + 1) * tmp1/2, tmp2, tmp1/2);
		rect_tmpv.push(rect1);
	}

	rect_clock = rect_tmpv[0];
	rect_solved   = rect_tmpv[1];
	rect_score = rect_tmpv[2];

	messbox = Array( q_ratio * width, height/5 , width * 2/3, height *2/3);
	rect1 = new Array( q_ratio * width * 2 ,  height *29/45, width * 1/3 -q_ratio * width * 2 , height *7/45);
	rect2 = new Array( q_ratio * width *2 + width /3 ,  height *29/45, width * 1/3 -q_ratio * width * 2 , height *7/45);
	
	rect_QUIT_array = new Array(rect1, rect2); 

	var b_ratio = 0.1, b_ratio1 = 0.05; 
	rect_sol = new Array(b_ratio * width, b_ratio * height, width - 2 * b_ratio * width, height - 2 * b_ratio * height);
	rect_no_sol = new Array( (b_ratio1 + b_ratio )* width, height - (b_ratio1 + 2 * b_ratio) * height, width - 2* (b_ratio1 +b_ratio)* width, b_ratio * height);
 
	game_draw(0);
	setInterval(function(){tickclock()},10);
 
}
function tickclock(){
	if (gameover_flag == 1)
		return; 
	if (status1 == 1 || status1 ==3){ // status1 = 3 then it's waiting for the decision on quit or not
		now = new Date();
	       var elapsedTime = now.getTime() - before.getTime();
		var a = 1;
		if(elapsedTime > 12){ a= Math.floor(elapsedTime/10); }
		before = new Date();    
		time_tick +=a;
		game_tick +=a;
		if (game_tick % 100 ==0){
			
			if (game_type ==0){ 
				time_now = 10 * (solved +12) - Math.floor(game_tick/100) - 20 * (totalQ - solved - unsolved);
				score_all = score_all + 0* solved * 60;
			}
			else{
				time_now = Math.floor(game_tick/100);
				score_all = score_all + 0 * solved * 60 - time_now * 0 ;
			}
			game_draw(1);
		}
		if (time_now < 0 && game_type == 0 && gameover_flag == 0) { time_now =0; game_draw(1); gameover(); return;}		 
	}
	else if (status1 == 4){ 
			now = new Date(); 
			var elapsedTime = now.getTime() - before.getTime();
			var a = 1;
			if(elapsedTime > 12){ a= Math.floor(elapsedTime/10); }
			before = new Date();    
			pause_tick +=a;
			var extra_tick = pause_tick - pause_total1;
			if(extra_tick >= 0) 	{ 
				if(coffee_waiting == 0) {game_tick += extra_tick; status1 = 1;game_draw(0);}
				else{game_tick += extra_tick; status1 =5; coffee_waiting=0;game_draw(0);}
			}
			if (pause_tick % 100 ==0){game_draw(0);}
	}
	else if (status1 == 5){
			now = new Date(); 
			var elapsedTime = now.getTime() - before.getTime();
			var a = 1;
			if(elapsedTime > 12){ a= Math.floor(elapsedTime/10); }
			before = new Date();    
			coffee_tick +=a;
			var extra_tick = coffee_tick - coffee_total;
			if(extra_tick >= 0) 	{game_tick += extra_tick; status1 = 1;game_draw(0);}
			if (coffee_tick % 100 ==0){game_draw(0);}

	}
}
 

function game_draw(isclock){ // 0) status1, 1) game_type, 2) time, time_left, 3) solved, unsolved, 4) this game history
	if (status1 == 0){
		draw_rect(Array(0,0, width, height), "#fff", 0, "#000"); // clean the whole region
		xywh_init = rect_init_array[0];
		xywh_init1 = rect_init_array[1];
		xywh_init2 = rect_init_array[2];
		draw_rect(xywh_init, "#fff", 5, "#f00"); 		draw_rect(xywh_init1,  "#fff", 5, "#00f"); 		draw_rect(xywh_init2,  "#fff", 5, "#0f0");
		
		var temp1 = text_in_rect (rect_init_array[0], game_type2); //	draw_text (Array(xywh_init[0] + xywh_init[2] / 5, xywh_init[1] + xywh_init[3] /1.9),game_type2, "#f00",  "bold " + Math.round(xywh_init[2]/10) +"px sans-serif");
		draw_text (Array(temp1 [0], temp1 [1]), game_type2, "#f00",  "bold " + temp1[2] +"px sans-serif");
		  temp1 = text_in_rect (rect_init_array[1], game_type1); //draw_text (Array(xywh_init1[0] + xywh_init1[2] / 5, xywh_init1[1] + xywh_init1[3] /1.9),game_type1, "#00f",  "bold " + Math.round(xywh_init1[2]/10) +"px sans-serif");
		draw_text (Array(temp1 [0], temp1 [1]), game_type1, "#00f",  "bold " + temp1[2] +"px sans-serif");  
		  temp1 = text_in_rect (rect_init_array[2], game_type3); //draw_text (Array(xywh_init2[0] + xywh_init2[2] / 10, xywh_init2[1] + xywh_init2[3] /1.9),game_type3, "#0f0",  "bold " + Math.round(xywh_init2[2]/10) +"px sans-serif");
		draw_text (Array(temp1 [0], temp1 [1]), game_type3, "#0f0",  "bold " + temp1[2] +"px sans-serif");  
		var imageObj2 = new Image();
		imageObj2.src = 'img/init/' + (ind_now) +'.gif';
     	imageObj2.onload = function() { canvas_cts.drawImage(imageObj2, rect_intro[0], rect_intro[1], rect_intro[2],rect_intro[3]); };
	     
		var imageObj1 = new Image();
        if (speaker_on == 0)
       		 imageObj1.src = 'img/speaker_off_32.png';
        else
        	 imageObj1.src = 'img/speaker.png';
        imageObj1.onload = function() { canvas_cts.drawImage(imageObj1, rect_quit1[0], rect_quit1[1], rect_quit1[2],rect_quit1[3]); };
	    return;
	}
		var time_text =  "时间: " + time_now; //texthere
	var score_text = "得分:" + Math.round(score_all);//texthere 
	var solved_text = "已解:" + solved;//texthere
	var temp1 = text_in_rect (rect_clock, time_text+"   "); 
	var temp2 = text_in_rect (rect_score, score_text+"  "); 
	var temp3 = text_in_rect (rect_solved, solved_text+"  "); 


	if (isclock)	{ // only need to update the clock region
		draw_rect(Array(rect_clock[0],rect_clock[1],rect_clock[2],rect_clock[3]) ,  "#fff", 0, "#00f");
		var colortext = "#000"; if (time_now <=20 && game_type ==0) colortext ="#f00";
		draw_text (Array(temp1 [0], temp1 [1]), time_text, colortext, "bold " + temp1 [2] +"px sans-serif");
		draw_rect(Array(rect_score[0],rect_score[1],rect_score[2],rect_score[3]) ,  "#fff", 0, "#00f");
		draw_text (Array(temp2 [0], temp2 [1]), score_text,  "#000", "bold " + temp2 [2] +"px sans-serif");
		return;	
	}
	draw_rect(Array(0,0, width, height), "#fff", 0, "#000"); // clean the whole region
	draw_rect(rect_clock ,  "#fff", 0, "#000");  		
	draw_rect(rect_score ,  "#fff", 0, "#000");  		
	draw_rect(rect_solved ,  "#fff", 0, "#000");  		
	draw_text (Array(temp1 [0], temp1 [1]), time_text,  "#000", "bold " + temp1 [2] +"px sans-serif");
	draw_text (Array(temp2 [0], temp2 [1]), score_text,  "#000", "bold " + temp2 [2] +"px sans-serif");
	draw_text (Array(temp3 [0], temp3 [1]), solved_text,  "#000", "bold " + temp3 [2] +"px sans-serif");
	var imageObj = new Image();
       imageObj.src = 'img/quit.png';
       imageObj.onload = function() { canvas_cts.drawImage(imageObj, rect_quit[0], rect_quit[1], rect_quit[2],rect_quit[3]); };

	var colorredo = "#000", widthredo = 5;
	if (future_steps.length ==0){ colorredo = "#aaa"; widthredo = 2;}
	draw_rect(rect_redo ,  "#fff", widthredo , colorredo );
	var redo = "  \u2192";
	draw_text(Array(rect_redo[0], rect_redo[1] + rect_redo[3]/1.2), redo, colorredo , "bold " + Math.round(rect_redo[2]/2) +"px sans-serif");

	var colorundo = "#000", widthundo = 5;
	if (past_steps.length ==0 && op_focus < 0 ){ colorundo = "#aaa"; widthundo = 2;}
	draw_rect(rect_undo ,  "#fff", widthundo,colorundo);
	var undo = "  \u2190";
	draw_text(Array(rect_undo[0], rect_undo[1] + rect_undo[3]/1.2), undo ,colorundo, "bold " + Math.round(rect_undo[2]/2) +"px sans-serif");


	var ratx = new Array(4.5,2.8,4.5,4.5, 10.5);
	var raty = new Array(1.2,1.3,1.2,1.2, 1.2 );

	var coloraddall = "#00a";
  	draw_rect(rect_addall ,  "#fff", 2, "#666" );
	var addall = "\u2295"
 	draw_text(Array(rect_addall [0]+ 0*rect_addall [3]/ratx[4], rect_addall [1] + rect_addall [3]/raty [4]), addall , coloraddall , "bold " + Math.round(rect_addall[2]/1) +"px sans-serif");

	var colormultiall = "#a0a";
 	draw_rect(rect_multiall ,  "#fff", 2, "#666" );
	var addall = "\u2297"
	draw_text(Array(rect_multiall [0]+ 0* rect_multiall [3]/ratx[4], rect_multiall [1] + rect_multiall [3]/raty [4]), addall , colormultiall , "bold " + Math.round(rect_multiall [2]/1) +"px sans-serif");

	var colorhelp = "#0ff";
	draw_rect(rect_help ,  "#fff", 2, colorhelp );
	var tmp2 = text_in_rect (rect_help, "help"); //texthere
	draw_text (Array(tmp2 [0], tmp2 [1]), "帮助", colorhelp , "bold " + tmp2 [2] +"px sans-serif");//texthere
	draw_rect(rect_www ,  "#fff", 2, colorhelp );
	tmp2 = text_in_rect (rect_www, "24理论   "); //texthere
	draw_text (Array(tmp2 [0], tmp2 [1]), " 24理论", colorhelp , "bold " + tmp2 [2] +"px sans-serif");//texthere

	draw_rect(rect_skip ,  "#fff", 2, colorhelp );
	tmp2 = text_in_rect (rect_skip, "Skip"); //texthere
	draw_text (Array(tmp2 [0], tmp2 [1]), "跳过", colorhelp , "bold " + tmp2 [2] +"px sans-serif");//texthere




	for (ii = 0; ii < 4; ii ++)
	{// draw ops
		var op_rect1 = op_rect[ii];
		if (ii == op_focus){
			draw_rect(op_rect1,  "#fff", rect_fat_width, "#000");
			draw_text(Array(op_rect1[0]+ op_rect1[3]/ratx[ii], op_rect1[1] + op_rect1[3]/raty[ii]), op_array[ii] , "#000", "bold " + Math.round(op_rect1[2]/1) +"px sans-serif");
		}
		else{
			draw_rect(op_rect1,  "#fff", rect_thin_width, "#666");
			draw_text(Array(op_rect1[0]+ op_rect1[3]/ratx[ii], op_rect1[1] + op_rect1[3]/raty[ii]), op_array[ii] , "#666", "bold " + Math.round(op_rect1[2]/1) +"px sans-serif");
		}			
	} 
	for (ii = 0; ii < quad.length; ii ++){ 
		var num_rect1 = num_rect[quad_pos[ii]];
		var text_string =  num_to_string (quad[ii]); 
  		var xy_fontsize = text_in_rect(num_rect1, text_string);
		if (quad_pos[ii] == num_focus){
			if (quad.length == 1){
				if (Math.abs(quad[0] - 24) < ep){
					if (status1 == 1) {
					 if (snd1)
					 {snd1.stop(); snd1.release();}
					 if(speaker_on == 1){
						  playSound('img/fanfare10.ogg' );
		            	 
		             }
					solved1(1);					
		             }
				}
				else{
				 if (snd2)
					 {snd2.stop(); snd2.release();}
			    if(speaker_on == 1){
			    	  playSound( 'img/boing_x.ogg' );
		        	 
 				}
					draw_rect(num_rect1,  "#fff", rect_fat_width, "#FF0000"); 
					draw_text(Array(xy_fontsize[0], xy_fontsize[1]), text_string, "#FF0000", "bold " + xy_fontsize[2] + "px sans-serif");
				}
			}
			else{
				draw_rect(num_rect1,  "#fff", rect_fat_width, "#0F7100"); 
				draw_text(Array(xy_fontsize[0], xy_fontsize[1]), text_string, "#0F7100", "bold " + xy_fontsize[2] + "px sans-serif");		
			}
		}
		else{
			draw_rect(num_rect1,  "#fff", rect_thin_width, "#55B72B"); //#0F7100 darker
			draw_text(Array(xy_fontsize[0], xy_fontsize[1]), text_string, "#55B72B", "bold " + xy_fontsize[2] + "px sans-serif");
		}
	}	
	if (status1==3){ // draw the message rect on top of the said game
		draw_rect(messbox, "#fff", 4, "#000");
		var temp3 = text_in_rect ( Array( marg_ratio * width, height/5 , width * 2/3, height *1/3), "重新开始?    "); 
		draw_text (Array(temp3 [0], temp3 [1]), "重新开始?",  "#f00", "bold " + temp3 [2] +"px sans-serif");
		draw_rect(rect_QUIT_array[0],"#fff", rect_thin_width, "#000");  		draw_rect(rect_QUIT_array[1],"#fff", rect_thin_width, "#000");
		draw_text(Array(rect_QUIT_array[0][0], rect_QUIT_array[0][1] + rect_QUIT_array[0][3]/1.3), "    否", "#000", "bold " + Math.round(rect_QUIT_array[0][2]/3) +"px sans-serif");//texthere
		draw_text(Array(rect_QUIT_array[1][0], rect_QUIT_array[1][1] + rect_QUIT_array[1][3]/1.3), "    是", "#000", "bold " + Math.round(rect_QUIT_array[1][2]/3) +"px sans-serif");//texthere

	}
	if (status1 == 4 && show_sol){ // show the solutions waiting for the esc

		draw_rect(rect_sol, "#fff", 2, "#bbb");
		draw_rect(rect_no_sol, "#fff", 4, "#bbb");
		var text_touch =  "触摸任何地方或者等待   " + ((pause_total1-pause_tick)/100).toFixed(0) + " 秒钟              ";		var rect_cof = new Array(rect_no_sol[0],rect_sol[1],rect_no_sol[2],rect_no_sol[3]/2);
		var tmp2 = text_in_rect (rect_cof, text_touch ); 
		draw_text (Array(tmp2 [0], tmp2 [1]), text_touch , "#888" , "bold " + tmp2 [2] +"px sans-serif");
		var text_solu = "下面显示所有独立解给 " + quad_prev[0] + "  "+ quad_prev[1] + "  "+ quad_prev[2] + "  "+ quad_prev[3];
		var rect_cof1 = new Array(rect_no_sol[0] + rect_no_sol[3]/4, rect_sol[1] + rect_no_sol[3]*2/3, rect_no_sol[2], rect_no_sol[3]/4);
		tmp2 = text_in_rect (rect_cof1, text_solu+"             "); 
		draw_text (Array(tmp2 [0], tmp2 [1]), text_solu , "#222" , "bold " + tmp2 [2] +"px sans-serif");

		var sol_vec = quad_all_prev[1].split(" ");
		if (sol_vec.length > 6){
			for (ii = 0; ii < sol_vec.length; ii +=2)
				 draw_text(Array(rect_no_sol[0] * 1.0, rect_sol[1]  + rect_sol[3] * (0.05 *4.0+ ii/2 * 0.09) ), "["+ (ii +1) +"] " +sol_vec[ii], "#008", "bold " + Math.round(rect_no_sol[3]/4) +"px sans-serif");
			for (ii = 1; ii < sol_vec.length; ii +=2)
				 draw_text(Array(rect_no_sol[0] * 3.7, rect_sol[1]  + rect_sol[3] * (0.05 *4.0+ (ii-1)/2 * 0.09) ), "["+ (ii +1) +"] " +sol_vec[ii], "#008", "bold " + Math.round(rect_no_sol[3]/4) +"px sans-serif");
		}
		else{
			for (ii = 0; ii < sol_vec.length; ii ++)
			 draw_text(Array(rect_no_sol[0] * 2.5, rect_sol[1]  + rect_sol[3] * (0.05 *4.0+ ii * 0.09) ), "["+ (ii +1) +"] " +sol_vec[ii], "#008", "bold " + Math.round(rect_no_sol[3]/4) +"px sans-serif");
		}
		var tmp2 = text_in_rect (rect_no_sol, text_never_show_sol); 
		draw_text (Array(tmp2 [0], tmp2 [1]), text_never_show_sol, "#888" , "bold " + tmp2 [2] +"px sans-serif");
	}
	if (status1 == 5){
		draw_rect(rect_sol, "#fff", 2, "#bbb");
		draw_rect(rect_no_sol, "#fff", 4, "#bbb");
		var text_cfb = "休息时间在 " + ((coffee_total-coffee_tick)/100).toFixed(0) + " 秒后结束   "; 
		var rect_cof = new Array(rect_no_sol[0],rect_no_sol[1]- rect_sol[3]/2,rect_no_sol[2],rect_no_sol[3]);
		var tmp2 = text_in_rect (rect_cof, text_cfb+"     "); 
		draw_text (Array(tmp2 [0], tmp2 [1]), text_cfb, "#888" , "bold " + tmp2 [2] +"px sans-serif");


//		draw_text(Array(rect_no_sol[0] * 1.5, rect_sol[1]  + rect_sol[3] * 0.05 *3 ),text_cfb, "#888", "bold " + Math.round(rect_no_sol[3]/5) +"px sans-serif");


		tmp2 = text_in_rect (rect_no_sol, text_takemeback+"     "); 
		draw_text (Array(tmp2 [0], tmp2 [1]), text_takemeback, "#00f" , "bold " + tmp2 [2] +"px sans-serif");

	}

}

function onclick1 (e){  
             var canvas = document.getElementById(canvasID);
       var x, y;
	var mainbody = document.getElementById(mainbodyID);

       if (e.pageX != undefined && e.pageY != undefined) {
  		x = e.pageX;
		y = e.pageY;
       }
       else {
		x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
		y = e.clientY + document.body.scrollTop  + document.documentElement.scrollTop;
       }
       x -= (canvas.offsetLeft + mainbody.offsetLeft);
       y -= (canvas.offsetTop + mainbody.offsetTop);  	switch (status1){
		case  0: // on the init-game screen
			game_type = click_ID(x,y, rect_init_array);
			if (game_type==0)
			{
				game_type = 0; 
				start_game ();
			}
			else if (game_type == 1)
			{
				var pop = new myPop(1);
        		pop.popOut(INFO_TEXT); 
        	}
			else if (game_type ==2)
			{
                var string1 = test_r(0,0,null);
				 halloffame(0, string1);
			}
			else if (game_type == 3)
			{
				speaker_on = 1 - speaker_on;
				game_draw(0);  
			} 
				 
			
		break;
		case 1:
			var regionID = click_ID(x,y,rect_all);
			ongame(regionID);
			game_draw(0);
		break;
		case 3:   // on the quit or not window
			var region_ID = click_ID(x,y, rect_QUIT_array);
			if (region_ID == 0) { // not quitting
				status1 = 1; game_draw(0);
			}
			else if (region_ID == 1){ //game_over
				gameover();
			}
		break; 
		case 4: //show solutions
			var ar1 = new Array(rect_no_sol);
			if (click_ID(x,y, ar1) == 0 )
			{ show_sol = 0;  status1=1; game_draw(0);}
			else {status1=1; game_draw(0);}
			if(coffee_waiting == 1){status1 =5; coffee_waiting=0;game_draw(0);}
		break;
		case 5://coffeebreak
			var ar1 = new Array(rect_no_sol);
			if (click_ID(x,y, ar1) == 0 )
			{  status1=1; game_draw(0);}

		break; 
		case  6: // hall of fame
			var regionID = click_ID(x,y, rect_records); 
			if (regionID == 2)
			{
				setTimeout( function(){  init_game(250,400)},100);
			}
			if (regionID < 2 && regionID >=0)
			{
				if (regionID == 0)
				{	
					var string1 = test_r(regionID,0,null); 
					halloffame(regionID, string1);
				}
				else{
					test_r(regionID,0,null); 
				}
			}
			
			
		break;
		default : 
	}
} 


function myPop(hasbutton) { 
    this.square = null;
    this.overdiv = null;

    this.popOut = function(msgtxt) {
        //filter:alpha(opacity=25);-moz-opacity:.25;opacity:.25;
        this.overdiv = document.createElement("div");
        this.overdiv.className = "overdiv"; 

	var canvas = document.getElementById(canvasID);
       var x, y;
	var mainbody = document.getElementById(mainbodyID);
 	x =  document.body.scrollLeft + document.documentElement.scrollLeft;
	y =   document.body.scrollTop  + document.documentElement.scrollTop;
       x = (canvas.offsetLeft*1 + 0*mainbody.offsetLeft);
        y = (canvas.offsetTop*1 + 0*mainbody.offsetTop);  





        this.square = document.createElement("div");
	  this.square.style.cssText = 'top:'+ (y+10)+ 'px;' + 'left:'+ ( x+10)+ 'px;' + 'position: absolute;       background-color: Menu;             border: #f9f9f9;            height: 380px;       width: 230px;';
        this.square.className = "square";
        this.square.Code = this;
        var msg = document.createElement("div");
        msg.className = "msg";
        msg.innerHTML = msgtxt;
        this.square.appendChild(msg);
        if (hasbutton)
      {  var closebtn = document.createElement("button");
        closebtn.onclick = function() {
            this.parentNode.Code.popIn();
        }
        closebtn.innerHTML = "关闭";//texthere
       this.square.appendChild(closebtn);
	}
        document.getElementById(mainbodyID).appendChild(this.overdiv);
        document.getElementById(mainbodyID).appendChild(this.square);
    }
    this.popIn = function() {
        if (this.square != null) {
            document.getElementById(mainbodyID).removeChild(this.square);
            this.square = null;
        }
        if (this.overdiv != null) {
        document.getElementById(mainbodyID).removeChild(this.overdiv);
        this.overdiv = null;
        }

    }
}
function loadURL1(url){
    window.open(url, '_blank');
    //    navigator.app.loadUrl(url, { openExternal:true });
    return false;
}

function loadURL(url){
//    window.open(url, '_blank');
    //    navigator.app.loadUrl(url, { openExternal:true });
    return false;
}
function getPhoneGapPath() {

    var path = window.location.pathname;
    path = path.substr( path, path.length - 10 );
    return 'file://' + path;

}
